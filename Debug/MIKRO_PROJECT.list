
MIKRO_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039d8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003b60  08003b60  00004b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ba8  08003ba8  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003ba8  08003ba8  00004ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003bb0  08003bb0  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bb0  08003bb0  00004bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003bb4  08003bb4  00004bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003bb8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  2000000c  08003bc4  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  08003bc4  00005158  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c3ff  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f98  00000000  00000000  0001143b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a30  00000000  00000000  000133d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007bb  00000000  00000000  00013e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000253b4  00000000  00000000  000145c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d32c  00000000  00000000  00039977  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e40e0  00000000  00000000  00046ca3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012ad83  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027f8  00000000  00000000  0012adc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0012d5c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003b48 	.word	0x08003b48

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003b48 	.word	0x08003b48

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004be:	4b09      	ldr	r3, [pc, #36]	@ (80004e4 <MX_GPIO_Init+0x2c>)
 80004c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004c2:	4a08      	ldr	r2, [pc, #32]	@ (80004e4 <MX_GPIO_Init+0x2c>)
 80004c4:	f043 0301 	orr.w	r3, r3, #1
 80004c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004ca:	4b06      	ldr	r3, [pc, #24]	@ (80004e4 <MX_GPIO_Init+0x2c>)
 80004cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004ce:	f003 0301 	and.w	r3, r3, #1
 80004d2:	607b      	str	r3, [r7, #4]
 80004d4:	687b      	ldr	r3, [r7, #4]

}
 80004d6:	bf00      	nop
 80004d8:	370c      	adds	r7, #12
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop
 80004e4:	40021000 	.word	0x40021000

080004e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ee:	f000 fa90 	bl	8000a12 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f2:	f000 f835 	bl	8000560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f6:	f7ff ffdf 	bl	80004b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004fa:	f000 f9a7 	bl	800084c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ring_buffer_setup(&rxBuffer, rxDataBuffer, RX_BUFFER_SIZE);
 80004fe:	2240      	movs	r2, #64	@ 0x40
 8000500:	4912      	ldr	r1, [pc, #72]	@ (800054c <main+0x64>)
 8000502:	4813      	ldr	r0, [pc, #76]	@ (8000550 <main+0x68>)
 8000504:	f000 f884 	bl	8000610 <ring_buffer_setup>
  ring_buffer_setup(&txBuffer, txDataBuffer, TX_BUFFER_SIZE);
 8000508:	2240      	movs	r2, #64	@ 0x40
 800050a:	4912      	ldr	r1, [pc, #72]	@ (8000554 <main+0x6c>)
 800050c:	4812      	ldr	r0, [pc, #72]	@ (8000558 <main+0x70>)
 800050e:	f000 f87f 	bl	8000610 <ring_buffer_setup>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  uint8_t data;
	  if(ring_buffer_read(&rxBuffer, &data))
 8000512:	1dfb      	adds	r3, r7, #7
 8000514:	4619      	mov	r1, r3
 8000516:	480e      	ldr	r0, [pc, #56]	@ (8000550 <main+0x68>)
 8000518:	f000 f8a6 	bl	8000668 <ring_buffer_read>
	  {

	  }
	  if(!ring_buffer_empty(&txBuffer))
 800051c:	480e      	ldr	r0, [pc, #56]	@ (8000558 <main+0x70>)
 800051e:	f000 f890 	bl	8000642 <ring_buffer_empty>
 8000522:	4603      	mov	r3, r0
 8000524:	f083 0301 	eor.w	r3, r3, #1
 8000528:	b2db      	uxtb	r3, r3
 800052a:	2b00      	cmp	r3, #0
 800052c:	d0f1      	beq.n	8000512 <main+0x2a>
	  {
		  uint8_t byteToSend;
		  if(ring_buffer_read(&txBuffer,&byteToSend))
 800052e:	1dbb      	adds	r3, r7, #6
 8000530:	4619      	mov	r1, r3
 8000532:	4809      	ldr	r0, [pc, #36]	@ (8000558 <main+0x70>)
 8000534:	f000 f898 	bl	8000668 <ring_buffer_read>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d0e9      	beq.n	8000512 <main+0x2a>
		  {
			  HAL_UART_Transmit_IT(&huart2, &byteToSend, 1);
 800053e:	1dbb      	adds	r3, r7, #6
 8000540:	2201      	movs	r2, #1
 8000542:	4619      	mov	r1, r3
 8000544:	4805      	ldr	r0, [pc, #20]	@ (800055c <main+0x74>)
 8000546:	f002 f981 	bl	800284c <HAL_UART_Transmit_IT>
  {
 800054a:	e7e2      	b.n	8000512 <main+0x2a>
 800054c:	20000048 	.word	0x20000048
 8000550:	20000028 	.word	0x20000028
 8000554:	20000088 	.word	0x20000088
 8000558:	20000038 	.word	0x20000038
 800055c:	200000cc 	.word	0x200000cc

08000560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b096      	sub	sp, #88	@ 0x58
 8000564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000566:	f107 0314 	add.w	r3, r7, #20
 800056a:	2244      	movs	r2, #68	@ 0x44
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f003 fabe 	bl	8003af0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000574:	463b      	mov	r3, r7
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
 8000580:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000582:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000586:	f000 fe01 	bl	800118c <HAL_PWREx_ControlVoltageScaling>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000590:	f000 f838 	bl	8000604 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000594:	2310      	movs	r3, #16
 8000596:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000598:	2301      	movs	r3, #1
 800059a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800059c:	2300      	movs	r3, #0
 800059e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005a0:	2360      	movs	r3, #96	@ 0x60
 80005a2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a4:	2302      	movs	r3, #2
 80005a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005a8:	2301      	movs	r3, #1
 80005aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005ac:	2301      	movs	r3, #1
 80005ae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80005b0:	2328      	movs	r3, #40	@ 0x28
 80005b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005b4:	2307      	movs	r3, #7
 80005b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005b8:	2302      	movs	r3, #2
 80005ba:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005bc:	2302      	movs	r3, #2
 80005be:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c0:	f107 0314 	add.w	r3, r7, #20
 80005c4:	4618      	mov	r0, r3
 80005c6:	f000 fe37 	bl	8001238 <HAL_RCC_OscConfig>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80005d0:	f000 f818 	bl	8000604 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d4:	230f      	movs	r3, #15
 80005d6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d8:	2303      	movs	r3, #3
 80005da:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e0:	2300      	movs	r3, #0
 80005e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005e8:	463b      	mov	r3, r7
 80005ea:	2104      	movs	r1, #4
 80005ec:	4618      	mov	r0, r3
 80005ee:	f001 f9ff 	bl	80019f0 <HAL_RCC_ClockConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005f8:	f000 f804 	bl	8000604 <Error_Handler>
  }
}
 80005fc:	bf00      	nop
 80005fe:	3758      	adds	r7, #88	@ 0x58
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000608:	b672      	cpsid	i
}
 800060a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800060c:	bf00      	nop
 800060e:	e7fd      	b.n	800060c <Error_Handler+0x8>

08000610 <ring_buffer_setup>:
 */

#include "ringbuffer.h"

void ring_buffer_setup(volatile ring_buffer_t* rb, volatile uint8_t* buffer, uint32_t size)
{
 8000610:	b480      	push	{r7}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0
 8000616:	60f8      	str	r0, [r7, #12]
 8000618:	60b9      	str	r1, [r7, #8]
 800061a:	607a      	str	r2, [r7, #4]
	rb->buffer = buffer;
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	68ba      	ldr	r2, [r7, #8]
 8000620:	601a      	str	r2, [r3, #0]
	rb->readIndex = 0;
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
	rb->writeIndex = 0;
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
	rb->mask = size - 1; // zakładając, że zmienna size jest potęgą 2
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	1e5a      	subs	r2, r3, #1
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	605a      	str	r2, [r3, #4]
}
 8000636:	bf00      	nop
 8000638:	3714      	adds	r7, #20
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr

08000642 <ring_buffer_empty>:
bool ring_buffer_empty(volatile ring_buffer_t* rb)
{
 8000642:	b480      	push	{r7}
 8000644:	b083      	sub	sp, #12
 8000646:	af00      	add	r7, sp, #0
 8000648:	6078      	str	r0, [r7, #4]
	return rb->readIndex == rb->writeIndex;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	689a      	ldr	r2, [r3, #8]
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	68db      	ldr	r3, [r3, #12]
 8000652:	429a      	cmp	r2, r3
 8000654:	bf0c      	ite	eq
 8000656:	2301      	moveq	r3, #1
 8000658:	2300      	movne	r3, #0
 800065a:	b2db      	uxtb	r3, r3
}
 800065c:	4618      	mov	r0, r3
 800065e:	370c      	adds	r7, #12
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr

08000668 <ring_buffer_read>:

bool ring_buffer_read(volatile ring_buffer_t* rb, uint8_t* byte)
{
 8000668:	b480      	push	{r7}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
 8000670:	6039      	str	r1, [r7, #0]
	uint32_t localReadIndex = rb->readIndex;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	689b      	ldr	r3, [r3, #8]
 8000676:	60fb      	str	r3, [r7, #12]
	uint32_t localWriteIndex = rb->writeIndex;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	60bb      	str	r3, [r7, #8]
	if(localReadIndex == localWriteIndex)
 800067e:	68fa      	ldr	r2, [r7, #12]
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	429a      	cmp	r2, r3
 8000684:	d101      	bne.n	800068a <ring_buffer_read+0x22>
	{
		return false;
 8000686:	2300      	movs	r3, #0
 8000688:	e011      	b.n	80006ae <ring_buffer_read+0x46>
	}
	*byte = rb->buffer[localReadIndex];
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681a      	ldr	r2, [r3, #0]
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	4413      	add	r3, r2
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	b2da      	uxtb	r2, r3
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	701a      	strb	r2, [r3, #0]
	localReadIndex = (localReadIndex + 1) & rb->mask; // jeżeli wykroczymy poza zasięg to wracamy na początek
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	1c5a      	adds	r2, r3, #1
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	685b      	ldr	r3, [r3, #4]
 80006a2:	4013      	ands	r3, r2
 80006a4:	60fb      	str	r3, [r7, #12]
	rb->readIndex = localReadIndex;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	68fa      	ldr	r2, [r7, #12]
 80006aa:	609a      	str	r2, [r3, #8]


	return true;
 80006ac:	2301      	movs	r3, #1
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	3714      	adds	r7, #20
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr

080006ba <ring_buffer_write>:



bool ring_buffer_write(volatile ring_buffer_t* rb, uint8_t byte)
{
 80006ba:	b480      	push	{r7}
 80006bc:	b087      	sub	sp, #28
 80006be:	af00      	add	r7, sp, #0
 80006c0:	6078      	str	r0, [r7, #4]
 80006c2:	460b      	mov	r3, r1
 80006c4:	70fb      	strb	r3, [r7, #3]
	uint32_t localReadIndex = rb->readIndex;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	689b      	ldr	r3, [r3, #8]
 80006ca:	617b      	str	r3, [r7, #20]
	uint32_t localWriteIndex = rb->writeIndex;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	68db      	ldr	r3, [r3, #12]
 80006d0:	613b      	str	r3, [r7, #16]

	uint32_t nextWriteIndex = (localWriteIndex + 1) & rb->mask; // działa tak samo jak w localReadIndex
 80006d2:	693b      	ldr	r3, [r7, #16]
 80006d4:	1c5a      	adds	r2, r3, #1
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	685b      	ldr	r3, [r3, #4]
 80006da:	4013      	ands	r3, r2
 80006dc:	60fb      	str	r3, [r7, #12]

	// ponieważ tutaj zdarzy się sytuacja, że chcemy coś zapisać ale tym samym dojdziemy do sytuacji gdzie
	// writeIndex == readIndex i stracimy wszystkie wcześniej zapisane dane
	if(nextWriteIndex == localReadIndex)
 80006de:	68fa      	ldr	r2, [r7, #12]
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	429a      	cmp	r2, r3
 80006e4:	d101      	bne.n	80006ea <ring_buffer_write+0x30>
	{
		return false;
 80006e6:	2300      	movs	r3, #0
 80006e8:	e009      	b.n	80006fe <ring_buffer_write+0x44>
	}
	rb->buffer[localWriteIndex] = byte;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	693b      	ldr	r3, [r7, #16]
 80006f0:	4413      	add	r3, r2
 80006f2:	78fa      	ldrb	r2, [r7, #3]
 80006f4:	701a      	strb	r2, [r3, #0]
	rb->writeIndex = nextWriteIndex;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	68fa      	ldr	r2, [r7, #12]
 80006fa:	60da      	str	r2, [r3, #12]
	return true;
 80006fc:	2301      	movs	r3, #1
}
 80006fe:	4618      	mov	r0, r3
 8000700:	371c      	adds	r7, #28
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
	...

0800070c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000712:	4b0f      	ldr	r3, [pc, #60]	@ (8000750 <HAL_MspInit+0x44>)
 8000714:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000716:	4a0e      	ldr	r2, [pc, #56]	@ (8000750 <HAL_MspInit+0x44>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	6613      	str	r3, [r2, #96]	@ 0x60
 800071e:	4b0c      	ldr	r3, [pc, #48]	@ (8000750 <HAL_MspInit+0x44>)
 8000720:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800072a:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <HAL_MspInit+0x44>)
 800072c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800072e:	4a08      	ldr	r2, [pc, #32]	@ (8000750 <HAL_MspInit+0x44>)
 8000730:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000734:	6593      	str	r3, [r2, #88]	@ 0x58
 8000736:	4b06      	ldr	r3, [pc, #24]	@ (8000750 <HAL_MspInit+0x44>)
 8000738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800073a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000742:	bf00      	nop
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	40021000 	.word	0x40021000

08000754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000758:	bf00      	nop
 800075a:	e7fd      	b.n	8000758 <NMI_Handler+0x4>

0800075c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000760:	bf00      	nop
 8000762:	e7fd      	b.n	8000760 <HardFault_Handler+0x4>

08000764 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000768:	bf00      	nop
 800076a:	e7fd      	b.n	8000768 <MemManage_Handler+0x4>

0800076c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000770:	bf00      	nop
 8000772:	e7fd      	b.n	8000770 <BusFault_Handler+0x4>

08000774 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000778:	bf00      	nop
 800077a:	e7fd      	b.n	8000778 <UsageFault_Handler+0x4>

0800077c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr

0800078a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800078e:	bf00      	nop
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr

08000798 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr

080007a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007aa:	f000 f987 	bl	8000abc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
	...

080007b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80007b8:	4802      	ldr	r0, [pc, #8]	@ (80007c4 <USART2_IRQHandler+0x10>)
 80007ba:	f002 f8a5 	bl	8002908 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	200000cc 	.word	0x200000cc

080007c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80007cc:	4b06      	ldr	r3, [pc, #24]	@ (80007e8 <SystemInit+0x20>)
 80007ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007d2:	4a05      	ldr	r2, [pc, #20]	@ (80007e8 <SystemInit+0x20>)
 80007d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	e000ed00 	.word	0xe000ed00

080007ec <UART_SendData>:
#include "ringbuffer.h"
/* USER CODE BEGIN 0 */
extern ring_buffer_t rxBuffer;
extern ring_buffer_t txBuffer;
extern uint8_t receivedByte;
void UART_SendData(uint8_t *data, uint16_t length) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	460b      	mov	r3, r1
 80007f6:	807b      	strh	r3, [r7, #2]
    for (uint16_t i = 0; i < length; i++) {
 80007f8:	2300      	movs	r3, #0
 80007fa:	81fb      	strh	r3, [r7, #14]
 80007fc:	e00a      	b.n	8000814 <UART_SendData+0x28>
        ring_buffer_write(&txBuffer, data[i]);
 80007fe:	89fb      	ldrh	r3, [r7, #14]
 8000800:	687a      	ldr	r2, [r7, #4]
 8000802:	4413      	add	r3, r2
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	4619      	mov	r1, r3
 8000808:	480e      	ldr	r0, [pc, #56]	@ (8000844 <UART_SendData+0x58>)
 800080a:	f7ff ff56 	bl	80006ba <ring_buffer_write>
    for (uint16_t i = 0; i < length; i++) {
 800080e:	89fb      	ldrh	r3, [r7, #14]
 8000810:	3301      	adds	r3, #1
 8000812:	81fb      	strh	r3, [r7, #14]
 8000814:	89fa      	ldrh	r2, [r7, #14]
 8000816:	887b      	ldrh	r3, [r7, #2]
 8000818:	429a      	cmp	r2, r3
 800081a:	d3f0      	bcc.n	80007fe <UART_SendData+0x12>
    }

    // Jeśli nie ma aktualnie transmisji, zacznij nadawanie
    uint8_t byteToSend;
    if (ring_buffer_read(&txBuffer, &byteToSend)) {
 800081c:	f107 030d 	add.w	r3, r7, #13
 8000820:	4619      	mov	r1, r3
 8000822:	4808      	ldr	r0, [pc, #32]	@ (8000844 <UART_SendData+0x58>)
 8000824:	f7ff ff20 	bl	8000668 <ring_buffer_read>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d006      	beq.n	800083c <UART_SendData+0x50>
        HAL_UART_Transmit_IT(&huart2, &byteToSend, 1);
 800082e:	f107 030d 	add.w	r3, r7, #13
 8000832:	2201      	movs	r2, #1
 8000834:	4619      	mov	r1, r3
 8000836:	4804      	ldr	r0, [pc, #16]	@ (8000848 <UART_SendData+0x5c>)
 8000838:	f002 f808 	bl	800284c <HAL_UART_Transmit_IT>
    }
}
 800083c:	bf00      	nop
 800083e:	3710      	adds	r7, #16
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20000038 	.word	0x20000038
 8000848:	200000cc 	.word	0x200000cc

0800084c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000850:	4b14      	ldr	r3, [pc, #80]	@ (80008a4 <MX_USART2_UART_Init+0x58>)
 8000852:	4a15      	ldr	r2, [pc, #84]	@ (80008a8 <MX_USART2_UART_Init+0x5c>)
 8000854:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000856:	4b13      	ldr	r3, [pc, #76]	@ (80008a4 <MX_USART2_UART_Init+0x58>)
 8000858:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800085c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800085e:	4b11      	ldr	r3, [pc, #68]	@ (80008a4 <MX_USART2_UART_Init+0x58>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000864:	4b0f      	ldr	r3, [pc, #60]	@ (80008a4 <MX_USART2_UART_Init+0x58>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800086a:	4b0e      	ldr	r3, [pc, #56]	@ (80008a4 <MX_USART2_UART_Init+0x58>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000870:	4b0c      	ldr	r3, [pc, #48]	@ (80008a4 <MX_USART2_UART_Init+0x58>)
 8000872:	220c      	movs	r2, #12
 8000874:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000876:	4b0b      	ldr	r3, [pc, #44]	@ (80008a4 <MX_USART2_UART_Init+0x58>)
 8000878:	2200      	movs	r2, #0
 800087a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800087c:	4b09      	ldr	r3, [pc, #36]	@ (80008a4 <MX_USART2_UART_Init+0x58>)
 800087e:	2200      	movs	r2, #0
 8000880:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000882:	4b08      	ldr	r3, [pc, #32]	@ (80008a4 <MX_USART2_UART_Init+0x58>)
 8000884:	2200      	movs	r2, #0
 8000886:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000888:	4b06      	ldr	r3, [pc, #24]	@ (80008a4 <MX_USART2_UART_Init+0x58>)
 800088a:	2200      	movs	r2, #0
 800088c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800088e:	4805      	ldr	r0, [pc, #20]	@ (80008a4 <MX_USART2_UART_Init+0x58>)
 8000890:	f001 ff8e 	bl	80027b0 <HAL_UART_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800089a:	f7ff feb3 	bl	8000604 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	200000cc 	.word	0x200000cc
 80008a8:	40004400 	.word	0x40004400

080008ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b0ac      	sub	sp, #176	@ 0xb0
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	2288      	movs	r2, #136	@ 0x88
 80008ca:	2100      	movs	r1, #0
 80008cc:	4618      	mov	r0, r3
 80008ce:	f003 f90f 	bl	8003af0 <memset>
  if(uartHandle->Instance==USART2)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a25      	ldr	r2, [pc, #148]	@ (800096c <HAL_UART_MspInit+0xc0>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d143      	bne.n	8000964 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008dc:	2302      	movs	r3, #2
 80008de:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008e0:	2300      	movs	r3, #0
 80008e2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008e4:	f107 0314 	add.w	r3, r7, #20
 80008e8:	4618      	mov	r0, r3
 80008ea:	f001 faa5 	bl	8001e38 <HAL_RCCEx_PeriphCLKConfig>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008f4:	f7ff fe86 	bl	8000604 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008f8:	4b1d      	ldr	r3, [pc, #116]	@ (8000970 <HAL_UART_MspInit+0xc4>)
 80008fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008fc:	4a1c      	ldr	r2, [pc, #112]	@ (8000970 <HAL_UART_MspInit+0xc4>)
 80008fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000902:	6593      	str	r3, [r2, #88]	@ 0x58
 8000904:	4b1a      	ldr	r3, [pc, #104]	@ (8000970 <HAL_UART_MspInit+0xc4>)
 8000906:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000908:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800090c:	613b      	str	r3, [r7, #16]
 800090e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000910:	4b17      	ldr	r3, [pc, #92]	@ (8000970 <HAL_UART_MspInit+0xc4>)
 8000912:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000914:	4a16      	ldr	r2, [pc, #88]	@ (8000970 <HAL_UART_MspInit+0xc4>)
 8000916:	f043 0301 	orr.w	r3, r3, #1
 800091a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800091c:	4b14      	ldr	r3, [pc, #80]	@ (8000970 <HAL_UART_MspInit+0xc4>)
 800091e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000920:	f003 0301 	and.w	r3, r3, #1
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000928:	230c      	movs	r3, #12
 800092a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092e:	2302      	movs	r3, #2
 8000930:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093a:	2303      	movs	r3, #3
 800093c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000940:	2307      	movs	r3, #7
 8000942:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000946:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800094a:	4619      	mov	r1, r3
 800094c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000950:	f000 fa64 	bl	8000e1c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8000954:	2200      	movs	r2, #0
 8000956:	2101      	movs	r1, #1
 8000958:	2026      	movs	r0, #38	@ 0x26
 800095a:	f000 f9aa 	bl	8000cb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800095e:	2026      	movs	r0, #38	@ 0x26
 8000960:	f000 f9c3 	bl	8000cea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000964:	bf00      	nop
 8000966:	37b0      	adds	r7, #176	@ 0xb0
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40004400 	.word	0x40004400
 8000970:	40021000 	.word	0x40021000

08000974 <HAL_UART_TxCpltCallback>:
		ring_buffer_write(&rxBuffer, receivedByte);

		HAL_UART_Receive_IT(&huart2, &receivedByte, 1);
	}
}
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
    if (huart == &huart2) {
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	4a0d      	ldr	r2, [pc, #52]	@ (80009b4 <HAL_UART_TxCpltCallback+0x40>)
 8000980:	4293      	cmp	r3, r2
 8000982:	d113      	bne.n	80009ac <HAL_UART_TxCpltCallback+0x38>
        uint8_t byteToSend;
        if (ring_buffer_read(&txBuffer, &byteToSend)) {
 8000984:	f107 030f 	add.w	r3, r7, #15
 8000988:	4619      	mov	r1, r3
 800098a:	480b      	ldr	r0, [pc, #44]	@ (80009b8 <HAL_UART_TxCpltCallback+0x44>)
 800098c:	f7ff fe6c 	bl	8000668 <ring_buffer_read>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d00a      	beq.n	80009ac <HAL_UART_TxCpltCallback+0x38>
        	UART_SendData(&receivedByte, 1);
 8000996:	2101      	movs	r1, #1
 8000998:	4808      	ldr	r0, [pc, #32]	@ (80009bc <HAL_UART_TxCpltCallback+0x48>)
 800099a:	f7ff ff27 	bl	80007ec <UART_SendData>
            HAL_UART_Transmit_IT(&huart2, &byteToSend, 1);
 800099e:	f107 030f 	add.w	r3, r7, #15
 80009a2:	2201      	movs	r2, #1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4803      	ldr	r0, [pc, #12]	@ (80009b4 <HAL_UART_TxCpltCallback+0x40>)
 80009a8:	f001 ff50 	bl	800284c <HAL_UART_Transmit_IT>
        }
    }
}
 80009ac:	bf00      	nop
 80009ae:	3710      	adds	r7, #16
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	200000cc 	.word	0x200000cc
 80009b8:	20000038 	.word	0x20000038
 80009bc:	200000c8 	.word	0x200000c8

080009c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80009c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009f8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009c4:	f7ff ff00 	bl	80007c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009c8:	480c      	ldr	r0, [pc, #48]	@ (80009fc <LoopForever+0x6>)
  ldr r1, =_edata
 80009ca:	490d      	ldr	r1, [pc, #52]	@ (8000a00 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000a04 <LoopForever+0xe>)
  movs r3, #0
 80009ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d0:	e002      	b.n	80009d8 <LoopCopyDataInit>

080009d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009d6:	3304      	adds	r3, #4

080009d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009dc:	d3f9      	bcc.n	80009d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009de:	4a0a      	ldr	r2, [pc, #40]	@ (8000a08 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009e0:	4c0a      	ldr	r4, [pc, #40]	@ (8000a0c <LoopForever+0x16>)
  movs r3, #0
 80009e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e4:	e001      	b.n	80009ea <LoopFillZerobss>

080009e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e8:	3204      	adds	r2, #4

080009ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009ec:	d3fb      	bcc.n	80009e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009ee:	f003 f887 	bl	8003b00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009f2:	f7ff fd79 	bl	80004e8 <main>

080009f6 <LoopForever>:

LoopForever:
    b LoopForever
 80009f6:	e7fe      	b.n	80009f6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009f8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80009fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a00:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a04:	08003bb8 	.word	0x08003bb8
  ldr r2, =_sbss
 8000a08:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a0c:	20000158 	.word	0x20000158

08000a10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a10:	e7fe      	b.n	8000a10 <ADC1_2_IRQHandler>

08000a12 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b082      	sub	sp, #8
 8000a16:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a1c:	2003      	movs	r0, #3
 8000a1e:	f000 f93d 	bl	8000c9c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a22:	200f      	movs	r0, #15
 8000a24:	f000 f80e 	bl	8000a44 <HAL_InitTick>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d002      	beq.n	8000a34 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	71fb      	strb	r3, [r7, #7]
 8000a32:	e001      	b.n	8000a38 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a34:	f7ff fe6a 	bl	800070c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a38:	79fb      	ldrb	r3, [r7, #7]
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
	...

08000a44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a50:	4b17      	ldr	r3, [pc, #92]	@ (8000ab0 <HAL_InitTick+0x6c>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d023      	beq.n	8000aa0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a58:	4b16      	ldr	r3, [pc, #88]	@ (8000ab4 <HAL_InitTick+0x70>)
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	4b14      	ldr	r3, [pc, #80]	@ (8000ab0 <HAL_InitTick+0x6c>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	4619      	mov	r1, r3
 8000a62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f000 f949 	bl	8000d06 <HAL_SYSTICK_Config>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d10f      	bne.n	8000a9a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2b0f      	cmp	r3, #15
 8000a7e:	d809      	bhi.n	8000a94 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a80:	2200      	movs	r2, #0
 8000a82:	6879      	ldr	r1, [r7, #4]
 8000a84:	f04f 30ff 	mov.w	r0, #4294967295
 8000a88:	f000 f913 	bl	8000cb2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a8c:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab8 <HAL_InitTick+0x74>)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6013      	str	r3, [r2, #0]
 8000a92:	e007      	b.n	8000aa4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a94:	2301      	movs	r3, #1
 8000a96:	73fb      	strb	r3, [r7, #15]
 8000a98:	e004      	b.n	8000aa4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	73fb      	strb	r3, [r7, #15]
 8000a9e:	e001      	b.n	8000aa4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3710      	adds	r7, #16
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000008 	.word	0x20000008
 8000ab4:	20000000 	.word	0x20000000
 8000ab8:	20000004 	.word	0x20000004

08000abc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	@ (8000adc <HAL_IncTick+0x20>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	4b06      	ldr	r3, [pc, #24]	@ (8000ae0 <HAL_IncTick+0x24>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4413      	add	r3, r2
 8000acc:	4a04      	ldr	r2, [pc, #16]	@ (8000ae0 <HAL_IncTick+0x24>)
 8000ace:	6013      	str	r3, [r2, #0]
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	20000008 	.word	0x20000008
 8000ae0:	20000154 	.word	0x20000154

08000ae4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae8:	4b03      	ldr	r3, [pc, #12]	@ (8000af8 <HAL_GetTick+0x14>)
 8000aea:	681b      	ldr	r3, [r3, #0]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	20000154 	.word	0x20000154

08000afc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f003 0307 	and.w	r3, r3, #7
 8000b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b40 <__NVIC_SetPriorityGrouping+0x44>)
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b12:	68ba      	ldr	r2, [r7, #8]
 8000b14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b18:	4013      	ands	r3, r2
 8000b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b2e:	4a04      	ldr	r2, [pc, #16]	@ (8000b40 <__NVIC_SetPriorityGrouping+0x44>)
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	60d3      	str	r3, [r2, #12]
}
 8000b34:	bf00      	nop
 8000b36:	3714      	adds	r7, #20
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b48:	4b04      	ldr	r3, [pc, #16]	@ (8000b5c <__NVIC_GetPriorityGrouping+0x18>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	0a1b      	lsrs	r3, r3, #8
 8000b4e:	f003 0307 	and.w	r3, r3, #7
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	db0b      	blt.n	8000b8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	f003 021f 	and.w	r2, r3, #31
 8000b78:	4907      	ldr	r1, [pc, #28]	@ (8000b98 <__NVIC_EnableIRQ+0x38>)
 8000b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7e:	095b      	lsrs	r3, r3, #5
 8000b80:	2001      	movs	r0, #1
 8000b82:	fa00 f202 	lsl.w	r2, r0, r2
 8000b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	e000e100 	.word	0xe000e100

08000b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	6039      	str	r1, [r7, #0]
 8000ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	db0a      	blt.n	8000bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	490c      	ldr	r1, [pc, #48]	@ (8000be8 <__NVIC_SetPriority+0x4c>)
 8000bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bba:	0112      	lsls	r2, r2, #4
 8000bbc:	b2d2      	uxtb	r2, r2
 8000bbe:	440b      	add	r3, r1
 8000bc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc4:	e00a      	b.n	8000bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	4908      	ldr	r1, [pc, #32]	@ (8000bec <__NVIC_SetPriority+0x50>)
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	f003 030f 	and.w	r3, r3, #15
 8000bd2:	3b04      	subs	r3, #4
 8000bd4:	0112      	lsls	r2, r2, #4
 8000bd6:	b2d2      	uxtb	r2, r2
 8000bd8:	440b      	add	r3, r1
 8000bda:	761a      	strb	r2, [r3, #24]
}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	e000e100 	.word	0xe000e100
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b089      	sub	sp, #36	@ 0x24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	60f8      	str	r0, [r7, #12]
 8000bf8:	60b9      	str	r1, [r7, #8]
 8000bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	f003 0307 	and.w	r3, r3, #7
 8000c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c04:	69fb      	ldr	r3, [r7, #28]
 8000c06:	f1c3 0307 	rsb	r3, r3, #7
 8000c0a:	2b04      	cmp	r3, #4
 8000c0c:	bf28      	it	cs
 8000c0e:	2304      	movcs	r3, #4
 8000c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	3304      	adds	r3, #4
 8000c16:	2b06      	cmp	r3, #6
 8000c18:	d902      	bls.n	8000c20 <NVIC_EncodePriority+0x30>
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	3b03      	subs	r3, #3
 8000c1e:	e000      	b.n	8000c22 <NVIC_EncodePriority+0x32>
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c24:	f04f 32ff 	mov.w	r2, #4294967295
 8000c28:	69bb      	ldr	r3, [r7, #24]
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	43da      	mvns	r2, r3
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	401a      	ands	r2, r3
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c38:	f04f 31ff 	mov.w	r1, #4294967295
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c42:	43d9      	mvns	r1, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c48:	4313      	orrs	r3, r2
         );
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3724      	adds	r7, #36	@ 0x24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
	...

08000c58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3b01      	subs	r3, #1
 8000c64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c68:	d301      	bcc.n	8000c6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e00f      	b.n	8000c8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c98 <SysTick_Config+0x40>)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c76:	210f      	movs	r1, #15
 8000c78:	f04f 30ff 	mov.w	r0, #4294967295
 8000c7c:	f7ff ff8e 	bl	8000b9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c80:	4b05      	ldr	r3, [pc, #20]	@ (8000c98 <SysTick_Config+0x40>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c86:	4b04      	ldr	r3, [pc, #16]	@ (8000c98 <SysTick_Config+0x40>)
 8000c88:	2207      	movs	r2, #7
 8000c8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	e000e010 	.word	0xe000e010

08000c9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ca4:	6878      	ldr	r0, [r7, #4]
 8000ca6:	f7ff ff29 	bl	8000afc <__NVIC_SetPriorityGrouping>
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b086      	sub	sp, #24
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	4603      	mov	r3, r0
 8000cba:	60b9      	str	r1, [r7, #8]
 8000cbc:	607a      	str	r2, [r7, #4]
 8000cbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cc4:	f7ff ff3e 	bl	8000b44 <__NVIC_GetPriorityGrouping>
 8000cc8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	68b9      	ldr	r1, [r7, #8]
 8000cce:	6978      	ldr	r0, [r7, #20]
 8000cd0:	f7ff ff8e 	bl	8000bf0 <NVIC_EncodePriority>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cda:	4611      	mov	r1, r2
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff ff5d 	bl	8000b9c <__NVIC_SetPriority>
}
 8000ce2:	bf00      	nop
 8000ce4:	3718      	adds	r7, #24
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff ff31 	bl	8000b60 <__NVIC_EnableIRQ>
}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b082      	sub	sp, #8
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f7ff ffa2 	bl	8000c58 <SysTick_Config>
 8000d14:	4603      	mov	r3, r0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	b085      	sub	sp, #20
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d26:	2300      	movs	r3, #0
 8000d28:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	2b02      	cmp	r3, #2
 8000d34:	d008      	beq.n	8000d48 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2204      	movs	r2, #4
 8000d3a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000d44:	2301      	movs	r3, #1
 8000d46:	e022      	b.n	8000d8e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f022 020e 	bic.w	r2, r2, #14
 8000d56:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f022 0201 	bic.w	r2, r2, #1
 8000d66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d6c:	f003 021c 	and.w	r2, r3, #28
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d74:	2101      	movs	r1, #1
 8000d76:	fa01 f202 	lsl.w	r2, r1, r2
 8000d7a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2201      	movs	r2, #1
 8000d80:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2200      	movs	r2, #0
 8000d88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8000d8c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3714      	adds	r7, #20
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b084      	sub	sp, #16
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000da2:	2300      	movs	r3, #0
 8000da4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d005      	beq.n	8000dbe <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2204      	movs	r2, #4
 8000db6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000db8:	2301      	movs	r3, #1
 8000dba:	73fb      	strb	r3, [r7, #15]
 8000dbc:	e029      	b.n	8000e12 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f022 020e 	bic.w	r2, r2, #14
 8000dcc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f022 0201 	bic.w	r2, r2, #1
 8000ddc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000de2:	f003 021c 	and.w	r2, r3, #28
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dea:	2101      	movs	r1, #1
 8000dec:	fa01 f202 	lsl.w	r2, r1, r2
 8000df0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2201      	movs	r2, #1
 8000df6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d003      	beq.n	8000e12 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	4798      	blx	r3
    }
  }
  return status;
 8000e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3710      	adds	r7, #16
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b087      	sub	sp, #28
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e2a:	e17f      	b.n	800112c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	2101      	movs	r1, #1
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	fa01 f303 	lsl.w	r3, r1, r3
 8000e38:	4013      	ands	r3, r2
 8000e3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f000 8171 	beq.w	8001126 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f003 0303 	and.w	r3, r3, #3
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d005      	beq.n	8000e5c <HAL_GPIO_Init+0x40>
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f003 0303 	and.w	r3, r3, #3
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d130      	bne.n	8000ebe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	689b      	ldr	r3, [r3, #8]
 8000e60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	2203      	movs	r2, #3
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	4013      	ands	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	68da      	ldr	r2, [r3, #12]
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e92:	2201      	movs	r2, #1
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	091b      	lsrs	r3, r3, #4
 8000ea8:	f003 0201 	and.w	r2, r3, #1
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f003 0303 	and.w	r3, r3, #3
 8000ec6:	2b03      	cmp	r3, #3
 8000ec8:	d118      	bne.n	8000efc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ece:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	4013      	ands	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	08db      	lsrs	r3, r3, #3
 8000ee6:	f003 0201 	and.w	r2, r3, #1
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f003 0303 	and.w	r3, r3, #3
 8000f04:	2b03      	cmp	r3, #3
 8000f06:	d017      	beq.n	8000f38 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	2203      	movs	r2, #3
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	689a      	ldr	r2, [r3, #8]
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f003 0303 	and.w	r3, r3, #3
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d123      	bne.n	8000f8c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	08da      	lsrs	r2, r3, #3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3208      	adds	r2, #8
 8000f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f50:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	f003 0307 	and.w	r3, r3, #7
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	220f      	movs	r2, #15
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	4013      	ands	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	691a      	ldr	r2, [r3, #16]
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	08da      	lsrs	r2, r3, #3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	3208      	adds	r2, #8
 8000f86:	6939      	ldr	r1, [r7, #16]
 8000f88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	2203      	movs	r2, #3
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 0203 	and.w	r2, r3, #3
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	f000 80ac 	beq.w	8001126 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fce:	4b5f      	ldr	r3, [pc, #380]	@ (800114c <HAL_GPIO_Init+0x330>)
 8000fd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fd2:	4a5e      	ldr	r2, [pc, #376]	@ (800114c <HAL_GPIO_Init+0x330>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fda:	4b5c      	ldr	r3, [pc, #368]	@ (800114c <HAL_GPIO_Init+0x330>)
 8000fdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	60bb      	str	r3, [r7, #8]
 8000fe4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fe6:	4a5a      	ldr	r2, [pc, #360]	@ (8001150 <HAL_GPIO_Init+0x334>)
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	089b      	lsrs	r3, r3, #2
 8000fec:	3302      	adds	r3, #2
 8000fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	f003 0303 	and.w	r3, r3, #3
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	220f      	movs	r2, #15
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43db      	mvns	r3, r3
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	4013      	ands	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001010:	d025      	beq.n	800105e <HAL_GPIO_Init+0x242>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a4f      	ldr	r2, [pc, #316]	@ (8001154 <HAL_GPIO_Init+0x338>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d01f      	beq.n	800105a <HAL_GPIO_Init+0x23e>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a4e      	ldr	r2, [pc, #312]	@ (8001158 <HAL_GPIO_Init+0x33c>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d019      	beq.n	8001056 <HAL_GPIO_Init+0x23a>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a4d      	ldr	r2, [pc, #308]	@ (800115c <HAL_GPIO_Init+0x340>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d013      	beq.n	8001052 <HAL_GPIO_Init+0x236>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a4c      	ldr	r2, [pc, #304]	@ (8001160 <HAL_GPIO_Init+0x344>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d00d      	beq.n	800104e <HAL_GPIO_Init+0x232>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a4b      	ldr	r2, [pc, #300]	@ (8001164 <HAL_GPIO_Init+0x348>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d007      	beq.n	800104a <HAL_GPIO_Init+0x22e>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a4a      	ldr	r2, [pc, #296]	@ (8001168 <HAL_GPIO_Init+0x34c>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d101      	bne.n	8001046 <HAL_GPIO_Init+0x22a>
 8001042:	2306      	movs	r3, #6
 8001044:	e00c      	b.n	8001060 <HAL_GPIO_Init+0x244>
 8001046:	2307      	movs	r3, #7
 8001048:	e00a      	b.n	8001060 <HAL_GPIO_Init+0x244>
 800104a:	2305      	movs	r3, #5
 800104c:	e008      	b.n	8001060 <HAL_GPIO_Init+0x244>
 800104e:	2304      	movs	r3, #4
 8001050:	e006      	b.n	8001060 <HAL_GPIO_Init+0x244>
 8001052:	2303      	movs	r3, #3
 8001054:	e004      	b.n	8001060 <HAL_GPIO_Init+0x244>
 8001056:	2302      	movs	r3, #2
 8001058:	e002      	b.n	8001060 <HAL_GPIO_Init+0x244>
 800105a:	2301      	movs	r3, #1
 800105c:	e000      	b.n	8001060 <HAL_GPIO_Init+0x244>
 800105e:	2300      	movs	r3, #0
 8001060:	697a      	ldr	r2, [r7, #20]
 8001062:	f002 0203 	and.w	r2, r2, #3
 8001066:	0092      	lsls	r2, r2, #2
 8001068:	4093      	lsls	r3, r2
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	4313      	orrs	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001070:	4937      	ldr	r1, [pc, #220]	@ (8001150 <HAL_GPIO_Init+0x334>)
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	089b      	lsrs	r3, r3, #2
 8001076:	3302      	adds	r3, #2
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800107e:	4b3b      	ldr	r3, [pc, #236]	@ (800116c <HAL_GPIO_Init+0x350>)
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	43db      	mvns	r3, r3
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4013      	ands	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d003      	beq.n	80010a2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4313      	orrs	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010a2:	4a32      	ldr	r2, [pc, #200]	@ (800116c <HAL_GPIO_Init+0x350>)
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010a8:	4b30      	ldr	r3, [pc, #192]	@ (800116c <HAL_GPIO_Init+0x350>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	43db      	mvns	r3, r3
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4013      	ands	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d003      	beq.n	80010cc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010cc:	4a27      	ldr	r2, [pc, #156]	@ (800116c <HAL_GPIO_Init+0x350>)
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010d2:	4b26      	ldr	r3, [pc, #152]	@ (800116c <HAL_GPIO_Init+0x350>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	43db      	mvns	r3, r3
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	4013      	ands	r3, r2
 80010e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d003      	beq.n	80010f6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010f6:	4a1d      	ldr	r2, [pc, #116]	@ (800116c <HAL_GPIO_Init+0x350>)
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80010fc:	4b1b      	ldr	r3, [pc, #108]	@ (800116c <HAL_GPIO_Init+0x350>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	43db      	mvns	r3, r3
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	4013      	ands	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001114:	2b00      	cmp	r3, #0
 8001116:	d003      	beq.n	8001120 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	4313      	orrs	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001120:	4a12      	ldr	r2, [pc, #72]	@ (800116c <HAL_GPIO_Init+0x350>)
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	3301      	adds	r3, #1
 800112a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	fa22 f303 	lsr.w	r3, r2, r3
 8001136:	2b00      	cmp	r3, #0
 8001138:	f47f ae78 	bne.w	8000e2c <HAL_GPIO_Init+0x10>
  }
}
 800113c:	bf00      	nop
 800113e:	bf00      	nop
 8001140:	371c      	adds	r7, #28
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	40021000 	.word	0x40021000
 8001150:	40010000 	.word	0x40010000
 8001154:	48000400 	.word	0x48000400
 8001158:	48000800 	.word	0x48000800
 800115c:	48000c00 	.word	0x48000c00
 8001160:	48001000 	.word	0x48001000
 8001164:	48001400 	.word	0x48001400
 8001168:	48001800 	.word	0x48001800
 800116c:	40010400 	.word	0x40010400

08001170 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001174:	4b04      	ldr	r3, [pc, #16]	@ (8001188 <HAL_PWREx_GetVoltageRange+0x18>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800117c:	4618      	mov	r0, r3
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	40007000 	.word	0x40007000

0800118c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800119a:	d130      	bne.n	80011fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800119c:	4b23      	ldr	r3, [pc, #140]	@ (800122c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80011a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011a8:	d038      	beq.n	800121c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011aa:	4b20      	ldr	r3, [pc, #128]	@ (800122c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80011b2:	4a1e      	ldr	r2, [pc, #120]	@ (800122c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011b4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001230 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2232      	movs	r2, #50	@ 0x32
 80011c0:	fb02 f303 	mul.w	r3, r2, r3
 80011c4:	4a1b      	ldr	r2, [pc, #108]	@ (8001234 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80011c6:	fba2 2303 	umull	r2, r3, r2, r3
 80011ca:	0c9b      	lsrs	r3, r3, #18
 80011cc:	3301      	adds	r3, #1
 80011ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011d0:	e002      	b.n	80011d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	3b01      	subs	r3, #1
 80011d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011d8:	4b14      	ldr	r3, [pc, #80]	@ (800122c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011da:	695b      	ldr	r3, [r3, #20]
 80011dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011e4:	d102      	bne.n	80011ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d1f2      	bne.n	80011d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011ec:	4b0f      	ldr	r3, [pc, #60]	@ (800122c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ee:	695b      	ldr	r3, [r3, #20]
 80011f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011f8:	d110      	bne.n	800121c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e00f      	b.n	800121e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80011fe:	4b0b      	ldr	r3, [pc, #44]	@ (800122c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001206:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800120a:	d007      	beq.n	800121c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800120c:	4b07      	ldr	r3, [pc, #28]	@ (800122c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001214:	4a05      	ldr	r2, [pc, #20]	@ (800122c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001216:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800121a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3714      	adds	r7, #20
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	40007000 	.word	0x40007000
 8001230:	20000000 	.word	0x20000000
 8001234:	431bde83 	.word	0x431bde83

08001238 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d101      	bne.n	800124a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e3ca      	b.n	80019e0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800124a:	4b97      	ldr	r3, [pc, #604]	@ (80014a8 <HAL_RCC_OscConfig+0x270>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	f003 030c 	and.w	r3, r3, #12
 8001252:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001254:	4b94      	ldr	r3, [pc, #592]	@ (80014a8 <HAL_RCC_OscConfig+0x270>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	f003 0303 	and.w	r3, r3, #3
 800125c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0310 	and.w	r3, r3, #16
 8001266:	2b00      	cmp	r3, #0
 8001268:	f000 80e4 	beq.w	8001434 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d007      	beq.n	8001282 <HAL_RCC_OscConfig+0x4a>
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	2b0c      	cmp	r3, #12
 8001276:	f040 808b 	bne.w	8001390 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	2b01      	cmp	r3, #1
 800127e:	f040 8087 	bne.w	8001390 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001282:	4b89      	ldr	r3, [pc, #548]	@ (80014a8 <HAL_RCC_OscConfig+0x270>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	2b00      	cmp	r3, #0
 800128c:	d005      	beq.n	800129a <HAL_RCC_OscConfig+0x62>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	699b      	ldr	r3, [r3, #24]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d101      	bne.n	800129a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e3a2      	b.n	80019e0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6a1a      	ldr	r2, [r3, #32]
 800129e:	4b82      	ldr	r3, [pc, #520]	@ (80014a8 <HAL_RCC_OscConfig+0x270>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0308 	and.w	r3, r3, #8
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d004      	beq.n	80012b4 <HAL_RCC_OscConfig+0x7c>
 80012aa:	4b7f      	ldr	r3, [pc, #508]	@ (80014a8 <HAL_RCC_OscConfig+0x270>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80012b2:	e005      	b.n	80012c0 <HAL_RCC_OscConfig+0x88>
 80012b4:	4b7c      	ldr	r3, [pc, #496]	@ (80014a8 <HAL_RCC_OscConfig+0x270>)
 80012b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80012ba:	091b      	lsrs	r3, r3, #4
 80012bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d223      	bcs.n	800130c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a1b      	ldr	r3, [r3, #32]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f000 fd55 	bl	8001d78 <RCC_SetFlashLatencyFromMSIRange>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e383      	b.n	80019e0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012d8:	4b73      	ldr	r3, [pc, #460]	@ (80014a8 <HAL_RCC_OscConfig+0x270>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a72      	ldr	r2, [pc, #456]	@ (80014a8 <HAL_RCC_OscConfig+0x270>)
 80012de:	f043 0308 	orr.w	r3, r3, #8
 80012e2:	6013      	str	r3, [r2, #0]
 80012e4:	4b70      	ldr	r3, [pc, #448]	@ (80014a8 <HAL_RCC_OscConfig+0x270>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6a1b      	ldr	r3, [r3, #32]
 80012f0:	496d      	ldr	r1, [pc, #436]	@ (80014a8 <HAL_RCC_OscConfig+0x270>)
 80012f2:	4313      	orrs	r3, r2
 80012f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012f6:	4b6c      	ldr	r3, [pc, #432]	@ (80014a8 <HAL_RCC_OscConfig+0x270>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	021b      	lsls	r3, r3, #8
 8001304:	4968      	ldr	r1, [pc, #416]	@ (80014a8 <HAL_RCC_OscConfig+0x270>)
 8001306:	4313      	orrs	r3, r2
 8001308:	604b      	str	r3, [r1, #4]
 800130a:	e025      	b.n	8001358 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800130c:	4b66      	ldr	r3, [pc, #408]	@ (80014a8 <HAL_RCC_OscConfig+0x270>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a65      	ldr	r2, [pc, #404]	@ (80014a8 <HAL_RCC_OscConfig+0x270>)
 8001312:	f043 0308 	orr.w	r3, r3, #8
 8001316:	6013      	str	r3, [r2, #0]
 8001318:	4b63      	ldr	r3, [pc, #396]	@ (80014a8 <HAL_RCC_OscConfig+0x270>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6a1b      	ldr	r3, [r3, #32]
 8001324:	4960      	ldr	r1, [pc, #384]	@ (80014a8 <HAL_RCC_OscConfig+0x270>)
 8001326:	4313      	orrs	r3, r2
 8001328:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800132a:	4b5f      	ldr	r3, [pc, #380]	@ (80014a8 <HAL_RCC_OscConfig+0x270>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	021b      	lsls	r3, r3, #8
 8001338:	495b      	ldr	r1, [pc, #364]	@ (80014a8 <HAL_RCC_OscConfig+0x270>)
 800133a:	4313      	orrs	r3, r2
 800133c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d109      	bne.n	8001358 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a1b      	ldr	r3, [r3, #32]
 8001348:	4618      	mov	r0, r3
 800134a:	f000 fd15 	bl	8001d78 <RCC_SetFlashLatencyFromMSIRange>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	e343      	b.n	80019e0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001358:	f000 fc4a 	bl	8001bf0 <HAL_RCC_GetSysClockFreq>
 800135c:	4602      	mov	r2, r0
 800135e:	4b52      	ldr	r3, [pc, #328]	@ (80014a8 <HAL_RCC_OscConfig+0x270>)
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	091b      	lsrs	r3, r3, #4
 8001364:	f003 030f 	and.w	r3, r3, #15
 8001368:	4950      	ldr	r1, [pc, #320]	@ (80014ac <HAL_RCC_OscConfig+0x274>)
 800136a:	5ccb      	ldrb	r3, [r1, r3]
 800136c:	f003 031f 	and.w	r3, r3, #31
 8001370:	fa22 f303 	lsr.w	r3, r2, r3
 8001374:	4a4e      	ldr	r2, [pc, #312]	@ (80014b0 <HAL_RCC_OscConfig+0x278>)
 8001376:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001378:	4b4e      	ldr	r3, [pc, #312]	@ (80014b4 <HAL_RCC_OscConfig+0x27c>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff fb61 	bl	8000a44 <HAL_InitTick>
 8001382:	4603      	mov	r3, r0
 8001384:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001386:	7bfb      	ldrb	r3, [r7, #15]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d052      	beq.n	8001432 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800138c:	7bfb      	ldrb	r3, [r7, #15]
 800138e:	e327      	b.n	80019e0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	699b      	ldr	r3, [r3, #24]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d032      	beq.n	80013fe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001398:	4b43      	ldr	r3, [pc, #268]	@ (80014a8 <HAL_RCC_OscConfig+0x270>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a42      	ldr	r2, [pc, #264]	@ (80014a8 <HAL_RCC_OscConfig+0x270>)
 800139e:	f043 0301 	orr.w	r3, r3, #1
 80013a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013a4:	f7ff fb9e 	bl	8000ae4 <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013ac:	f7ff fb9a 	bl	8000ae4 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e310      	b.n	80019e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013be:	4b3a      	ldr	r3, [pc, #232]	@ (80014a8 <HAL_RCC_OscConfig+0x270>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d0f0      	beq.n	80013ac <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013ca:	4b37      	ldr	r3, [pc, #220]	@ (80014a8 <HAL_RCC_OscConfig+0x270>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a36      	ldr	r2, [pc, #216]	@ (80014a8 <HAL_RCC_OscConfig+0x270>)
 80013d0:	f043 0308 	orr.w	r3, r3, #8
 80013d4:	6013      	str	r3, [r2, #0]
 80013d6:	4b34      	ldr	r3, [pc, #208]	@ (80014a8 <HAL_RCC_OscConfig+0x270>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6a1b      	ldr	r3, [r3, #32]
 80013e2:	4931      	ldr	r1, [pc, #196]	@ (80014a8 <HAL_RCC_OscConfig+0x270>)
 80013e4:	4313      	orrs	r3, r2
 80013e6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013e8:	4b2f      	ldr	r3, [pc, #188]	@ (80014a8 <HAL_RCC_OscConfig+0x270>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	69db      	ldr	r3, [r3, #28]
 80013f4:	021b      	lsls	r3, r3, #8
 80013f6:	492c      	ldr	r1, [pc, #176]	@ (80014a8 <HAL_RCC_OscConfig+0x270>)
 80013f8:	4313      	orrs	r3, r2
 80013fa:	604b      	str	r3, [r1, #4]
 80013fc:	e01a      	b.n	8001434 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013fe:	4b2a      	ldr	r3, [pc, #168]	@ (80014a8 <HAL_RCC_OscConfig+0x270>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a29      	ldr	r2, [pc, #164]	@ (80014a8 <HAL_RCC_OscConfig+0x270>)
 8001404:	f023 0301 	bic.w	r3, r3, #1
 8001408:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800140a:	f7ff fb6b 	bl	8000ae4 <HAL_GetTick>
 800140e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001410:	e008      	b.n	8001424 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001412:	f7ff fb67 	bl	8000ae4 <HAL_GetTick>
 8001416:	4602      	mov	r2, r0
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d901      	bls.n	8001424 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e2dd      	b.n	80019e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001424:	4b20      	ldr	r3, [pc, #128]	@ (80014a8 <HAL_RCC_OscConfig+0x270>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	2b00      	cmp	r3, #0
 800142e:	d1f0      	bne.n	8001412 <HAL_RCC_OscConfig+0x1da>
 8001430:	e000      	b.n	8001434 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001432:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0301 	and.w	r3, r3, #1
 800143c:	2b00      	cmp	r3, #0
 800143e:	d074      	beq.n	800152a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	2b08      	cmp	r3, #8
 8001444:	d005      	beq.n	8001452 <HAL_RCC_OscConfig+0x21a>
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	2b0c      	cmp	r3, #12
 800144a:	d10e      	bne.n	800146a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	2b03      	cmp	r3, #3
 8001450:	d10b      	bne.n	800146a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001452:	4b15      	ldr	r3, [pc, #84]	@ (80014a8 <HAL_RCC_OscConfig+0x270>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d064      	beq.n	8001528 <HAL_RCC_OscConfig+0x2f0>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d160      	bne.n	8001528 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e2ba      	b.n	80019e0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001472:	d106      	bne.n	8001482 <HAL_RCC_OscConfig+0x24a>
 8001474:	4b0c      	ldr	r3, [pc, #48]	@ (80014a8 <HAL_RCC_OscConfig+0x270>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a0b      	ldr	r2, [pc, #44]	@ (80014a8 <HAL_RCC_OscConfig+0x270>)
 800147a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800147e:	6013      	str	r3, [r2, #0]
 8001480:	e026      	b.n	80014d0 <HAL_RCC_OscConfig+0x298>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800148a:	d115      	bne.n	80014b8 <HAL_RCC_OscConfig+0x280>
 800148c:	4b06      	ldr	r3, [pc, #24]	@ (80014a8 <HAL_RCC_OscConfig+0x270>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a05      	ldr	r2, [pc, #20]	@ (80014a8 <HAL_RCC_OscConfig+0x270>)
 8001492:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001496:	6013      	str	r3, [r2, #0]
 8001498:	4b03      	ldr	r3, [pc, #12]	@ (80014a8 <HAL_RCC_OscConfig+0x270>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a02      	ldr	r2, [pc, #8]	@ (80014a8 <HAL_RCC_OscConfig+0x270>)
 800149e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014a2:	6013      	str	r3, [r2, #0]
 80014a4:	e014      	b.n	80014d0 <HAL_RCC_OscConfig+0x298>
 80014a6:	bf00      	nop
 80014a8:	40021000 	.word	0x40021000
 80014ac:	08003b60 	.word	0x08003b60
 80014b0:	20000000 	.word	0x20000000
 80014b4:	20000004 	.word	0x20000004
 80014b8:	4ba0      	ldr	r3, [pc, #640]	@ (800173c <HAL_RCC_OscConfig+0x504>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a9f      	ldr	r2, [pc, #636]	@ (800173c <HAL_RCC_OscConfig+0x504>)
 80014be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014c2:	6013      	str	r3, [r2, #0]
 80014c4:	4b9d      	ldr	r3, [pc, #628]	@ (800173c <HAL_RCC_OscConfig+0x504>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a9c      	ldr	r2, [pc, #624]	@ (800173c <HAL_RCC_OscConfig+0x504>)
 80014ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d013      	beq.n	8001500 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d8:	f7ff fb04 	bl	8000ae4 <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014e0:	f7ff fb00 	bl	8000ae4 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b64      	cmp	r3, #100	@ 0x64
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e276      	b.n	80019e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014f2:	4b92      	ldr	r3, [pc, #584]	@ (800173c <HAL_RCC_OscConfig+0x504>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d0f0      	beq.n	80014e0 <HAL_RCC_OscConfig+0x2a8>
 80014fe:	e014      	b.n	800152a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001500:	f7ff faf0 	bl	8000ae4 <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001508:	f7ff faec 	bl	8000ae4 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b64      	cmp	r3, #100	@ 0x64
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e262      	b.n	80019e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800151a:	4b88      	ldr	r3, [pc, #544]	@ (800173c <HAL_RCC_OscConfig+0x504>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1f0      	bne.n	8001508 <HAL_RCC_OscConfig+0x2d0>
 8001526:	e000      	b.n	800152a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001528:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d060      	beq.n	80015f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	2b04      	cmp	r3, #4
 800153a:	d005      	beq.n	8001548 <HAL_RCC_OscConfig+0x310>
 800153c:	69bb      	ldr	r3, [r7, #24]
 800153e:	2b0c      	cmp	r3, #12
 8001540:	d119      	bne.n	8001576 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	2b02      	cmp	r3, #2
 8001546:	d116      	bne.n	8001576 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001548:	4b7c      	ldr	r3, [pc, #496]	@ (800173c <HAL_RCC_OscConfig+0x504>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001550:	2b00      	cmp	r3, #0
 8001552:	d005      	beq.n	8001560 <HAL_RCC_OscConfig+0x328>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d101      	bne.n	8001560 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e23f      	b.n	80019e0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001560:	4b76      	ldr	r3, [pc, #472]	@ (800173c <HAL_RCC_OscConfig+0x504>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	691b      	ldr	r3, [r3, #16]
 800156c:	061b      	lsls	r3, r3, #24
 800156e:	4973      	ldr	r1, [pc, #460]	@ (800173c <HAL_RCC_OscConfig+0x504>)
 8001570:	4313      	orrs	r3, r2
 8001572:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001574:	e040      	b.n	80015f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d023      	beq.n	80015c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800157e:	4b6f      	ldr	r3, [pc, #444]	@ (800173c <HAL_RCC_OscConfig+0x504>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a6e      	ldr	r2, [pc, #440]	@ (800173c <HAL_RCC_OscConfig+0x504>)
 8001584:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001588:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800158a:	f7ff faab 	bl	8000ae4 <HAL_GetTick>
 800158e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001590:	e008      	b.n	80015a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001592:	f7ff faa7 	bl	8000ae4 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e21d      	b.n	80019e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015a4:	4b65      	ldr	r3, [pc, #404]	@ (800173c <HAL_RCC_OscConfig+0x504>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d0f0      	beq.n	8001592 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b0:	4b62      	ldr	r3, [pc, #392]	@ (800173c <HAL_RCC_OscConfig+0x504>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	691b      	ldr	r3, [r3, #16]
 80015bc:	061b      	lsls	r3, r3, #24
 80015be:	495f      	ldr	r1, [pc, #380]	@ (800173c <HAL_RCC_OscConfig+0x504>)
 80015c0:	4313      	orrs	r3, r2
 80015c2:	604b      	str	r3, [r1, #4]
 80015c4:	e018      	b.n	80015f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015c6:	4b5d      	ldr	r3, [pc, #372]	@ (800173c <HAL_RCC_OscConfig+0x504>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a5c      	ldr	r2, [pc, #368]	@ (800173c <HAL_RCC_OscConfig+0x504>)
 80015cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80015d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d2:	f7ff fa87 	bl	8000ae4 <HAL_GetTick>
 80015d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015d8:	e008      	b.n	80015ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015da:	f7ff fa83 	bl	8000ae4 <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d901      	bls.n	80015ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	e1f9      	b.n	80019e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015ec:	4b53      	ldr	r3, [pc, #332]	@ (800173c <HAL_RCC_OscConfig+0x504>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d1f0      	bne.n	80015da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0308 	and.w	r3, r3, #8
 8001600:	2b00      	cmp	r3, #0
 8001602:	d03c      	beq.n	800167e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	695b      	ldr	r3, [r3, #20]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d01c      	beq.n	8001646 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800160c:	4b4b      	ldr	r3, [pc, #300]	@ (800173c <HAL_RCC_OscConfig+0x504>)
 800160e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001612:	4a4a      	ldr	r2, [pc, #296]	@ (800173c <HAL_RCC_OscConfig+0x504>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800161c:	f7ff fa62 	bl	8000ae4 <HAL_GetTick>
 8001620:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001622:	e008      	b.n	8001636 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001624:	f7ff fa5e 	bl	8000ae4 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	2b02      	cmp	r3, #2
 8001630:	d901      	bls.n	8001636 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001632:	2303      	movs	r3, #3
 8001634:	e1d4      	b.n	80019e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001636:	4b41      	ldr	r3, [pc, #260]	@ (800173c <HAL_RCC_OscConfig+0x504>)
 8001638:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d0ef      	beq.n	8001624 <HAL_RCC_OscConfig+0x3ec>
 8001644:	e01b      	b.n	800167e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001646:	4b3d      	ldr	r3, [pc, #244]	@ (800173c <HAL_RCC_OscConfig+0x504>)
 8001648:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800164c:	4a3b      	ldr	r2, [pc, #236]	@ (800173c <HAL_RCC_OscConfig+0x504>)
 800164e:	f023 0301 	bic.w	r3, r3, #1
 8001652:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001656:	f7ff fa45 	bl	8000ae4 <HAL_GetTick>
 800165a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800165c:	e008      	b.n	8001670 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800165e:	f7ff fa41 	bl	8000ae4 <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d901      	bls.n	8001670 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e1b7      	b.n	80019e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001670:	4b32      	ldr	r3, [pc, #200]	@ (800173c <HAL_RCC_OscConfig+0x504>)
 8001672:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1ef      	bne.n	800165e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0304 	and.w	r3, r3, #4
 8001686:	2b00      	cmp	r3, #0
 8001688:	f000 80a6 	beq.w	80017d8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800168c:	2300      	movs	r3, #0
 800168e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001690:	4b2a      	ldr	r3, [pc, #168]	@ (800173c <HAL_RCC_OscConfig+0x504>)
 8001692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001694:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d10d      	bne.n	80016b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800169c:	4b27      	ldr	r3, [pc, #156]	@ (800173c <HAL_RCC_OscConfig+0x504>)
 800169e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016a0:	4a26      	ldr	r2, [pc, #152]	@ (800173c <HAL_RCC_OscConfig+0x504>)
 80016a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80016a8:	4b24      	ldr	r3, [pc, #144]	@ (800173c <HAL_RCC_OscConfig+0x504>)
 80016aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016b0:	60bb      	str	r3, [r7, #8]
 80016b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016b4:	2301      	movs	r3, #1
 80016b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016b8:	4b21      	ldr	r3, [pc, #132]	@ (8001740 <HAL_RCC_OscConfig+0x508>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d118      	bne.n	80016f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001740 <HAL_RCC_OscConfig+0x508>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a1d      	ldr	r2, [pc, #116]	@ (8001740 <HAL_RCC_OscConfig+0x508>)
 80016ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016d0:	f7ff fa08 	bl	8000ae4 <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016d8:	f7ff fa04 	bl	8000ae4 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e17a      	b.n	80019e0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016ea:	4b15      	ldr	r3, [pc, #84]	@ (8001740 <HAL_RCC_OscConfig+0x508>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d0f0      	beq.n	80016d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d108      	bne.n	8001710 <HAL_RCC_OscConfig+0x4d8>
 80016fe:	4b0f      	ldr	r3, [pc, #60]	@ (800173c <HAL_RCC_OscConfig+0x504>)
 8001700:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001704:	4a0d      	ldr	r2, [pc, #52]	@ (800173c <HAL_RCC_OscConfig+0x504>)
 8001706:	f043 0301 	orr.w	r3, r3, #1
 800170a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800170e:	e029      	b.n	8001764 <HAL_RCC_OscConfig+0x52c>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	2b05      	cmp	r3, #5
 8001716:	d115      	bne.n	8001744 <HAL_RCC_OscConfig+0x50c>
 8001718:	4b08      	ldr	r3, [pc, #32]	@ (800173c <HAL_RCC_OscConfig+0x504>)
 800171a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800171e:	4a07      	ldr	r2, [pc, #28]	@ (800173c <HAL_RCC_OscConfig+0x504>)
 8001720:	f043 0304 	orr.w	r3, r3, #4
 8001724:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001728:	4b04      	ldr	r3, [pc, #16]	@ (800173c <HAL_RCC_OscConfig+0x504>)
 800172a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800172e:	4a03      	ldr	r2, [pc, #12]	@ (800173c <HAL_RCC_OscConfig+0x504>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001738:	e014      	b.n	8001764 <HAL_RCC_OscConfig+0x52c>
 800173a:	bf00      	nop
 800173c:	40021000 	.word	0x40021000
 8001740:	40007000 	.word	0x40007000
 8001744:	4b9c      	ldr	r3, [pc, #624]	@ (80019b8 <HAL_RCC_OscConfig+0x780>)
 8001746:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800174a:	4a9b      	ldr	r2, [pc, #620]	@ (80019b8 <HAL_RCC_OscConfig+0x780>)
 800174c:	f023 0301 	bic.w	r3, r3, #1
 8001750:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001754:	4b98      	ldr	r3, [pc, #608]	@ (80019b8 <HAL_RCC_OscConfig+0x780>)
 8001756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800175a:	4a97      	ldr	r2, [pc, #604]	@ (80019b8 <HAL_RCC_OscConfig+0x780>)
 800175c:	f023 0304 	bic.w	r3, r3, #4
 8001760:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d016      	beq.n	800179a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800176c:	f7ff f9ba 	bl	8000ae4 <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001772:	e00a      	b.n	800178a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001774:	f7ff f9b6 	bl	8000ae4 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001782:	4293      	cmp	r3, r2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e12a      	b.n	80019e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800178a:	4b8b      	ldr	r3, [pc, #556]	@ (80019b8 <HAL_RCC_OscConfig+0x780>)
 800178c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001790:	f003 0302 	and.w	r3, r3, #2
 8001794:	2b00      	cmp	r3, #0
 8001796:	d0ed      	beq.n	8001774 <HAL_RCC_OscConfig+0x53c>
 8001798:	e015      	b.n	80017c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800179a:	f7ff f9a3 	bl	8000ae4 <HAL_GetTick>
 800179e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017a0:	e00a      	b.n	80017b8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017a2:	f7ff f99f 	bl	8000ae4 <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e113      	b.n	80019e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017b8:	4b7f      	ldr	r3, [pc, #508]	@ (80019b8 <HAL_RCC_OscConfig+0x780>)
 80017ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1ed      	bne.n	80017a2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017c6:	7ffb      	ldrb	r3, [r7, #31]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d105      	bne.n	80017d8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017cc:	4b7a      	ldr	r3, [pc, #488]	@ (80019b8 <HAL_RCC_OscConfig+0x780>)
 80017ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017d0:	4a79      	ldr	r2, [pc, #484]	@ (80019b8 <HAL_RCC_OscConfig+0x780>)
 80017d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017d6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f000 80fe 	beq.w	80019de <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	f040 80d0 	bne.w	800198c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80017ec:	4b72      	ldr	r3, [pc, #456]	@ (80019b8 <HAL_RCC_OscConfig+0x780>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	f003 0203 	and.w	r2, r3, #3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d130      	bne.n	8001862 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180a:	3b01      	subs	r3, #1
 800180c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800180e:	429a      	cmp	r2, r3
 8001810:	d127      	bne.n	8001862 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800181c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800181e:	429a      	cmp	r2, r3
 8001820:	d11f      	bne.n	8001862 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800182c:	2a07      	cmp	r2, #7
 800182e:	bf14      	ite	ne
 8001830:	2201      	movne	r2, #1
 8001832:	2200      	moveq	r2, #0
 8001834:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001836:	4293      	cmp	r3, r2
 8001838:	d113      	bne.n	8001862 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001844:	085b      	lsrs	r3, r3, #1
 8001846:	3b01      	subs	r3, #1
 8001848:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800184a:	429a      	cmp	r2, r3
 800184c:	d109      	bne.n	8001862 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001858:	085b      	lsrs	r3, r3, #1
 800185a:	3b01      	subs	r3, #1
 800185c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800185e:	429a      	cmp	r2, r3
 8001860:	d06e      	beq.n	8001940 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	2b0c      	cmp	r3, #12
 8001866:	d069      	beq.n	800193c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001868:	4b53      	ldr	r3, [pc, #332]	@ (80019b8 <HAL_RCC_OscConfig+0x780>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d105      	bne.n	8001880 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001874:	4b50      	ldr	r3, [pc, #320]	@ (80019b8 <HAL_RCC_OscConfig+0x780>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e0ad      	b.n	80019e0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001884:	4b4c      	ldr	r3, [pc, #304]	@ (80019b8 <HAL_RCC_OscConfig+0x780>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a4b      	ldr	r2, [pc, #300]	@ (80019b8 <HAL_RCC_OscConfig+0x780>)
 800188a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800188e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001890:	f7ff f928 	bl	8000ae4 <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001898:	f7ff f924 	bl	8000ae4 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e09a      	b.n	80019e0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018aa:	4b43      	ldr	r3, [pc, #268]	@ (80019b8 <HAL_RCC_OscConfig+0x780>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1f0      	bne.n	8001898 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018b6:	4b40      	ldr	r3, [pc, #256]	@ (80019b8 <HAL_RCC_OscConfig+0x780>)
 80018b8:	68da      	ldr	r2, [r3, #12]
 80018ba:	4b40      	ldr	r3, [pc, #256]	@ (80019bc <HAL_RCC_OscConfig+0x784>)
 80018bc:	4013      	ands	r3, r2
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80018c6:	3a01      	subs	r2, #1
 80018c8:	0112      	lsls	r2, r2, #4
 80018ca:	4311      	orrs	r1, r2
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80018d0:	0212      	lsls	r2, r2, #8
 80018d2:	4311      	orrs	r1, r2
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80018d8:	0852      	lsrs	r2, r2, #1
 80018da:	3a01      	subs	r2, #1
 80018dc:	0552      	lsls	r2, r2, #21
 80018de:	4311      	orrs	r1, r2
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80018e4:	0852      	lsrs	r2, r2, #1
 80018e6:	3a01      	subs	r2, #1
 80018e8:	0652      	lsls	r2, r2, #25
 80018ea:	4311      	orrs	r1, r2
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80018f0:	0912      	lsrs	r2, r2, #4
 80018f2:	0452      	lsls	r2, r2, #17
 80018f4:	430a      	orrs	r2, r1
 80018f6:	4930      	ldr	r1, [pc, #192]	@ (80019b8 <HAL_RCC_OscConfig+0x780>)
 80018f8:	4313      	orrs	r3, r2
 80018fa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80018fc:	4b2e      	ldr	r3, [pc, #184]	@ (80019b8 <HAL_RCC_OscConfig+0x780>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a2d      	ldr	r2, [pc, #180]	@ (80019b8 <HAL_RCC_OscConfig+0x780>)
 8001902:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001906:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001908:	4b2b      	ldr	r3, [pc, #172]	@ (80019b8 <HAL_RCC_OscConfig+0x780>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	4a2a      	ldr	r2, [pc, #168]	@ (80019b8 <HAL_RCC_OscConfig+0x780>)
 800190e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001912:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001914:	f7ff f8e6 	bl	8000ae4 <HAL_GetTick>
 8001918:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800191a:	e008      	b.n	800192e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800191c:	f7ff f8e2 	bl	8000ae4 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b02      	cmp	r3, #2
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e058      	b.n	80019e0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800192e:	4b22      	ldr	r3, [pc, #136]	@ (80019b8 <HAL_RCC_OscConfig+0x780>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d0f0      	beq.n	800191c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800193a:	e050      	b.n	80019de <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e04f      	b.n	80019e0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001940:	4b1d      	ldr	r3, [pc, #116]	@ (80019b8 <HAL_RCC_OscConfig+0x780>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d148      	bne.n	80019de <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800194c:	4b1a      	ldr	r3, [pc, #104]	@ (80019b8 <HAL_RCC_OscConfig+0x780>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a19      	ldr	r2, [pc, #100]	@ (80019b8 <HAL_RCC_OscConfig+0x780>)
 8001952:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001956:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001958:	4b17      	ldr	r3, [pc, #92]	@ (80019b8 <HAL_RCC_OscConfig+0x780>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	4a16      	ldr	r2, [pc, #88]	@ (80019b8 <HAL_RCC_OscConfig+0x780>)
 800195e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001962:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001964:	f7ff f8be 	bl	8000ae4 <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800196c:	f7ff f8ba 	bl	8000ae4 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e030      	b.n	80019e0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800197e:	4b0e      	ldr	r3, [pc, #56]	@ (80019b8 <HAL_RCC_OscConfig+0x780>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d0f0      	beq.n	800196c <HAL_RCC_OscConfig+0x734>
 800198a:	e028      	b.n	80019de <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	2b0c      	cmp	r3, #12
 8001990:	d023      	beq.n	80019da <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001992:	4b09      	ldr	r3, [pc, #36]	@ (80019b8 <HAL_RCC_OscConfig+0x780>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a08      	ldr	r2, [pc, #32]	@ (80019b8 <HAL_RCC_OscConfig+0x780>)
 8001998:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800199c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199e:	f7ff f8a1 	bl	8000ae4 <HAL_GetTick>
 80019a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019a4:	e00c      	b.n	80019c0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a6:	f7ff f89d 	bl	8000ae4 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d905      	bls.n	80019c0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e013      	b.n	80019e0 <HAL_RCC_OscConfig+0x7a8>
 80019b8:	40021000 	.word	0x40021000
 80019bc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019c0:	4b09      	ldr	r3, [pc, #36]	@ (80019e8 <HAL_RCC_OscConfig+0x7b0>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d1ec      	bne.n	80019a6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80019cc:	4b06      	ldr	r3, [pc, #24]	@ (80019e8 <HAL_RCC_OscConfig+0x7b0>)
 80019ce:	68da      	ldr	r2, [r3, #12]
 80019d0:	4905      	ldr	r1, [pc, #20]	@ (80019e8 <HAL_RCC_OscConfig+0x7b0>)
 80019d2:	4b06      	ldr	r3, [pc, #24]	@ (80019ec <HAL_RCC_OscConfig+0x7b4>)
 80019d4:	4013      	ands	r3, r2
 80019d6:	60cb      	str	r3, [r1, #12]
 80019d8:	e001      	b.n	80019de <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e000      	b.n	80019e0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80019de:	2300      	movs	r3, #0
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3720      	adds	r7, #32
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40021000 	.word	0x40021000
 80019ec:	feeefffc 	.word	0xfeeefffc

080019f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d101      	bne.n	8001a04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e0e7      	b.n	8001bd4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a04:	4b75      	ldr	r3, [pc, #468]	@ (8001bdc <HAL_RCC_ClockConfig+0x1ec>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0307 	and.w	r3, r3, #7
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d910      	bls.n	8001a34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a12:	4b72      	ldr	r3, [pc, #456]	@ (8001bdc <HAL_RCC_ClockConfig+0x1ec>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f023 0207 	bic.w	r2, r3, #7
 8001a1a:	4970      	ldr	r1, [pc, #448]	@ (8001bdc <HAL_RCC_ClockConfig+0x1ec>)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a22:	4b6e      	ldr	r3, [pc, #440]	@ (8001bdc <HAL_RCC_ClockConfig+0x1ec>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	683a      	ldr	r2, [r7, #0]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d001      	beq.n	8001a34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e0cf      	b.n	8001bd4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d010      	beq.n	8001a62 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689a      	ldr	r2, [r3, #8]
 8001a44:	4b66      	ldr	r3, [pc, #408]	@ (8001be0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d908      	bls.n	8001a62 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a50:	4b63      	ldr	r3, [pc, #396]	@ (8001be0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	4960      	ldr	r1, [pc, #384]	@ (8001be0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d04c      	beq.n	8001b08 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	2b03      	cmp	r3, #3
 8001a74:	d107      	bne.n	8001a86 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a76:	4b5a      	ldr	r3, [pc, #360]	@ (8001be0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d121      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e0a6      	b.n	8001bd4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d107      	bne.n	8001a9e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a8e:	4b54      	ldr	r3, [pc, #336]	@ (8001be0 <HAL_RCC_ClockConfig+0x1f0>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d115      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e09a      	b.n	8001bd4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d107      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001aa6:	4b4e      	ldr	r3, [pc, #312]	@ (8001be0 <HAL_RCC_ClockConfig+0x1f0>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d109      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e08e      	b.n	8001bd4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ab6:	4b4a      	ldr	r3, [pc, #296]	@ (8001be0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e086      	b.n	8001bd4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ac6:	4b46      	ldr	r3, [pc, #280]	@ (8001be0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f023 0203 	bic.w	r2, r3, #3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	4943      	ldr	r1, [pc, #268]	@ (8001be0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ad8:	f7ff f804 	bl	8000ae4 <HAL_GetTick>
 8001adc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ade:	e00a      	b.n	8001af6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ae0:	f7ff f800 	bl	8000ae4 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e06e      	b.n	8001bd4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001af6:	4b3a      	ldr	r3, [pc, #232]	@ (8001be0 <HAL_RCC_ClockConfig+0x1f0>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 020c 	and.w	r2, r3, #12
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d1eb      	bne.n	8001ae0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d010      	beq.n	8001b36 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	4b31      	ldr	r3, [pc, #196]	@ (8001be0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d208      	bcs.n	8001b36 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b24:	4b2e      	ldr	r3, [pc, #184]	@ (8001be0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	492b      	ldr	r1, [pc, #172]	@ (8001be0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b36:	4b29      	ldr	r3, [pc, #164]	@ (8001bdc <HAL_RCC_ClockConfig+0x1ec>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0307 	and.w	r3, r3, #7
 8001b3e:	683a      	ldr	r2, [r7, #0]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d210      	bcs.n	8001b66 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b44:	4b25      	ldr	r3, [pc, #148]	@ (8001bdc <HAL_RCC_ClockConfig+0x1ec>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f023 0207 	bic.w	r2, r3, #7
 8001b4c:	4923      	ldr	r1, [pc, #140]	@ (8001bdc <HAL_RCC_ClockConfig+0x1ec>)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b54:	4b21      	ldr	r3, [pc, #132]	@ (8001bdc <HAL_RCC_ClockConfig+0x1ec>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0307 	and.w	r3, r3, #7
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d001      	beq.n	8001b66 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e036      	b.n	8001bd4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0304 	and.w	r3, r3, #4
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d008      	beq.n	8001b84 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b72:	4b1b      	ldr	r3, [pc, #108]	@ (8001be0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	4918      	ldr	r1, [pc, #96]	@ (8001be0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b80:	4313      	orrs	r3, r2
 8001b82:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0308 	and.w	r3, r3, #8
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d009      	beq.n	8001ba4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b90:	4b13      	ldr	r3, [pc, #76]	@ (8001be0 <HAL_RCC_ClockConfig+0x1f0>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	00db      	lsls	r3, r3, #3
 8001b9e:	4910      	ldr	r1, [pc, #64]	@ (8001be0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ba4:	f000 f824 	bl	8001bf0 <HAL_RCC_GetSysClockFreq>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	4b0d      	ldr	r3, [pc, #52]	@ (8001be0 <HAL_RCC_ClockConfig+0x1f0>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	091b      	lsrs	r3, r3, #4
 8001bb0:	f003 030f 	and.w	r3, r3, #15
 8001bb4:	490b      	ldr	r1, [pc, #44]	@ (8001be4 <HAL_RCC_ClockConfig+0x1f4>)
 8001bb6:	5ccb      	ldrb	r3, [r1, r3]
 8001bb8:	f003 031f 	and.w	r3, r3, #31
 8001bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc0:	4a09      	ldr	r2, [pc, #36]	@ (8001be8 <HAL_RCC_ClockConfig+0x1f8>)
 8001bc2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001bc4:	4b09      	ldr	r3, [pc, #36]	@ (8001bec <HAL_RCC_ClockConfig+0x1fc>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7fe ff3b 	bl	8000a44 <HAL_InitTick>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	72fb      	strb	r3, [r7, #11]

  return status;
 8001bd2:	7afb      	ldrb	r3, [r7, #11]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40022000 	.word	0x40022000
 8001be0:	40021000 	.word	0x40021000
 8001be4:	08003b60 	.word	0x08003b60
 8001be8:	20000000 	.word	0x20000000
 8001bec:	20000004 	.word	0x20000004

08001bf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b089      	sub	sp, #36	@ 0x24
 8001bf4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61fb      	str	r3, [r7, #28]
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bfe:	4b3e      	ldr	r3, [pc, #248]	@ (8001cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f003 030c 	and.w	r3, r3, #12
 8001c06:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c08:	4b3b      	ldr	r3, [pc, #236]	@ (8001cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	f003 0303 	and.w	r3, r3, #3
 8001c10:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d005      	beq.n	8001c24 <HAL_RCC_GetSysClockFreq+0x34>
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	2b0c      	cmp	r3, #12
 8001c1c:	d121      	bne.n	8001c62 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d11e      	bne.n	8001c62 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c24:	4b34      	ldr	r3, [pc, #208]	@ (8001cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0308 	and.w	r3, r3, #8
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d107      	bne.n	8001c40 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c30:	4b31      	ldr	r3, [pc, #196]	@ (8001cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c36:	0a1b      	lsrs	r3, r3, #8
 8001c38:	f003 030f 	and.w	r3, r3, #15
 8001c3c:	61fb      	str	r3, [r7, #28]
 8001c3e:	e005      	b.n	8001c4c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c40:	4b2d      	ldr	r3, [pc, #180]	@ (8001cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	091b      	lsrs	r3, r3, #4
 8001c46:	f003 030f 	and.w	r3, r3, #15
 8001c4a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c4c:	4a2b      	ldr	r2, [pc, #172]	@ (8001cfc <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c54:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d10d      	bne.n	8001c78 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c60:	e00a      	b.n	8001c78 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	2b04      	cmp	r3, #4
 8001c66:	d102      	bne.n	8001c6e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c68:	4b25      	ldr	r3, [pc, #148]	@ (8001d00 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c6a:	61bb      	str	r3, [r7, #24]
 8001c6c:	e004      	b.n	8001c78 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	2b08      	cmp	r3, #8
 8001c72:	d101      	bne.n	8001c78 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c74:	4b23      	ldr	r3, [pc, #140]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c76:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	2b0c      	cmp	r3, #12
 8001c7c:	d134      	bne.n	8001ce8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	f003 0303 	and.w	r3, r3, #3
 8001c86:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d003      	beq.n	8001c96 <HAL_RCC_GetSysClockFreq+0xa6>
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	2b03      	cmp	r3, #3
 8001c92:	d003      	beq.n	8001c9c <HAL_RCC_GetSysClockFreq+0xac>
 8001c94:	e005      	b.n	8001ca2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c96:	4b1a      	ldr	r3, [pc, #104]	@ (8001d00 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c98:	617b      	str	r3, [r7, #20]
      break;
 8001c9a:	e005      	b.n	8001ca8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c9c:	4b19      	ldr	r3, [pc, #100]	@ (8001d04 <HAL_RCC_GetSysClockFreq+0x114>)
 8001c9e:	617b      	str	r3, [r7, #20]
      break;
 8001ca0:	e002      	b.n	8001ca8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	617b      	str	r3, [r7, #20]
      break;
 8001ca6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ca8:	4b13      	ldr	r3, [pc, #76]	@ (8001cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	091b      	lsrs	r3, r3, #4
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001cb6:	4b10      	ldr	r3, [pc, #64]	@ (8001cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	0a1b      	lsrs	r3, r3, #8
 8001cbc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001cc0:	697a      	ldr	r2, [r7, #20]
 8001cc2:	fb03 f202 	mul.w	r2, r3, r2
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ccc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cce:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	0e5b      	lsrs	r3, r3, #25
 8001cd4:	f003 0303 	and.w	r3, r3, #3
 8001cd8:	3301      	adds	r3, #1
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ce8:	69bb      	ldr	r3, [r7, #24]
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3724      	adds	r7, #36	@ 0x24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	08003b78 	.word	0x08003b78
 8001d00:	00f42400 	.word	0x00f42400
 8001d04:	007a1200 	.word	0x007a1200

08001d08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d0c:	4b03      	ldr	r3, [pc, #12]	@ (8001d1c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	20000000 	.word	0x20000000

08001d20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d24:	f7ff fff0 	bl	8001d08 <HAL_RCC_GetHCLKFreq>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	4b06      	ldr	r3, [pc, #24]	@ (8001d44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	0a1b      	lsrs	r3, r3, #8
 8001d30:	f003 0307 	and.w	r3, r3, #7
 8001d34:	4904      	ldr	r1, [pc, #16]	@ (8001d48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d36:	5ccb      	ldrb	r3, [r1, r3]
 8001d38:	f003 031f 	and.w	r3, r3, #31
 8001d3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40021000 	.word	0x40021000
 8001d48:	08003b70 	.word	0x08003b70

08001d4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d50:	f7ff ffda 	bl	8001d08 <HAL_RCC_GetHCLKFreq>
 8001d54:	4602      	mov	r2, r0
 8001d56:	4b06      	ldr	r3, [pc, #24]	@ (8001d70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	0adb      	lsrs	r3, r3, #11
 8001d5c:	f003 0307 	and.w	r3, r3, #7
 8001d60:	4904      	ldr	r1, [pc, #16]	@ (8001d74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d62:	5ccb      	ldrb	r3, [r1, r3]
 8001d64:	f003 031f 	and.w	r3, r3, #31
 8001d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40021000 	.word	0x40021000
 8001d74:	08003b70 	.word	0x08003b70

08001d78 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d80:	2300      	movs	r3, #0
 8001d82:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d84:	4b2a      	ldr	r3, [pc, #168]	@ (8001e30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d003      	beq.n	8001d98 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d90:	f7ff f9ee 	bl	8001170 <HAL_PWREx_GetVoltageRange>
 8001d94:	6178      	str	r0, [r7, #20]
 8001d96:	e014      	b.n	8001dc2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d98:	4b25      	ldr	r3, [pc, #148]	@ (8001e30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d9c:	4a24      	ldr	r2, [pc, #144]	@ (8001e30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001da2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001da4:	4b22      	ldr	r3, [pc, #136]	@ (8001e30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001da6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001da8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001db0:	f7ff f9de 	bl	8001170 <HAL_PWREx_GetVoltageRange>
 8001db4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001db6:	4b1e      	ldr	r3, [pc, #120]	@ (8001e30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dba:	4a1d      	ldr	r2, [pc, #116]	@ (8001e30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dbc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001dc0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001dc8:	d10b      	bne.n	8001de2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2b80      	cmp	r3, #128	@ 0x80
 8001dce:	d919      	bls.n	8001e04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2ba0      	cmp	r3, #160	@ 0xa0
 8001dd4:	d902      	bls.n	8001ddc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	613b      	str	r3, [r7, #16]
 8001dda:	e013      	b.n	8001e04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ddc:	2301      	movs	r3, #1
 8001dde:	613b      	str	r3, [r7, #16]
 8001de0:	e010      	b.n	8001e04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2b80      	cmp	r3, #128	@ 0x80
 8001de6:	d902      	bls.n	8001dee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001de8:	2303      	movs	r3, #3
 8001dea:	613b      	str	r3, [r7, #16]
 8001dec:	e00a      	b.n	8001e04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b80      	cmp	r3, #128	@ 0x80
 8001df2:	d102      	bne.n	8001dfa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001df4:	2302      	movs	r3, #2
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	e004      	b.n	8001e04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b70      	cmp	r3, #112	@ 0x70
 8001dfe:	d101      	bne.n	8001e04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e00:	2301      	movs	r3, #1
 8001e02:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e04:	4b0b      	ldr	r3, [pc, #44]	@ (8001e34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f023 0207 	bic.w	r2, r3, #7
 8001e0c:	4909      	ldr	r1, [pc, #36]	@ (8001e34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e14:	4b07      	ldr	r3, [pc, #28]	@ (8001e34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0307 	and.w	r3, r3, #7
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d001      	beq.n	8001e26 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e000      	b.n	8001e28 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3718      	adds	r7, #24
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40021000 	.word	0x40021000
 8001e34:	40022000 	.word	0x40022000

08001e38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e40:	2300      	movs	r3, #0
 8001e42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e44:	2300      	movs	r3, #0
 8001e46:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d041      	beq.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e58:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001e5c:	d02a      	beq.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001e5e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001e62:	d824      	bhi.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e64:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001e68:	d008      	beq.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001e6a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001e6e:	d81e      	bhi.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d00a      	beq.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001e74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e78:	d010      	beq.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001e7a:	e018      	b.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e7c:	4b86      	ldr	r3, [pc, #536]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	4a85      	ldr	r2, [pc, #532]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e86:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e88:	e015      	b.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	3304      	adds	r3, #4
 8001e8e:	2100      	movs	r1, #0
 8001e90:	4618      	mov	r0, r3
 8001e92:	f000 fabb 	bl	800240c <RCCEx_PLLSAI1_Config>
 8001e96:	4603      	mov	r3, r0
 8001e98:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e9a:	e00c      	b.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	3320      	adds	r3, #32
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f000 fba6 	bl	80025f4 <RCCEx_PLLSAI2_Config>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001eac:	e003      	b.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	74fb      	strb	r3, [r7, #19]
      break;
 8001eb2:	e000      	b.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001eb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001eb6:	7cfb      	ldrb	r3, [r7, #19]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d10b      	bne.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ebc:	4b76      	ldr	r3, [pc, #472]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ec2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001eca:	4973      	ldr	r1, [pc, #460]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001ed2:	e001      	b.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ed4:	7cfb      	ldrb	r3, [r7, #19]
 8001ed6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d041      	beq.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001ee8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001eec:	d02a      	beq.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001eee:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001ef2:	d824      	bhi.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001ef4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001ef8:	d008      	beq.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001efa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001efe:	d81e      	bhi.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d00a      	beq.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001f04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f08:	d010      	beq.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f0a:	e018      	b.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f0c:	4b62      	ldr	r3, [pc, #392]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	4a61      	ldr	r2, [pc, #388]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f16:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f18:	e015      	b.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	3304      	adds	r3, #4
 8001f1e:	2100      	movs	r1, #0
 8001f20:	4618      	mov	r0, r3
 8001f22:	f000 fa73 	bl	800240c <RCCEx_PLLSAI1_Config>
 8001f26:	4603      	mov	r3, r0
 8001f28:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f2a:	e00c      	b.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3320      	adds	r3, #32
 8001f30:	2100      	movs	r1, #0
 8001f32:	4618      	mov	r0, r3
 8001f34:	f000 fb5e 	bl	80025f4 <RCCEx_PLLSAI2_Config>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001f3c:	e003      	b.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	74fb      	strb	r3, [r7, #19]
      break;
 8001f42:	e000      	b.n	8001f46 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001f44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f46:	7cfb      	ldrb	r3, [r7, #19]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d10b      	bne.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f4c:	4b52      	ldr	r3, [pc, #328]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f52:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f5a:	494f      	ldr	r1, [pc, #316]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001f62:	e001      	b.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f64:	7cfb      	ldrb	r3, [r7, #19]
 8001f66:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f000 80a0 	beq.w	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f76:	2300      	movs	r3, #0
 8001f78:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f7a:	4b47      	ldr	r3, [pc, #284]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001f86:	2301      	movs	r3, #1
 8001f88:	e000      	b.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d00d      	beq.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f90:	4b41      	ldr	r3, [pc, #260]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f94:	4a40      	ldr	r2, [pc, #256]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f9c:	4b3e      	ldr	r3, [pc, #248]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fa0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fa4:	60bb      	str	r3, [r7, #8]
 8001fa6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fac:	4b3b      	ldr	r3, [pc, #236]	@ (800209c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a3a      	ldr	r2, [pc, #232]	@ (800209c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fb6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001fb8:	f7fe fd94 	bl	8000ae4 <HAL_GetTick>
 8001fbc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001fbe:	e009      	b.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fc0:	f7fe fd90 	bl	8000ae4 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d902      	bls.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	74fb      	strb	r3, [r7, #19]
        break;
 8001fd2:	e005      	b.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001fd4:	4b31      	ldr	r3, [pc, #196]	@ (800209c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d0ef      	beq.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001fe0:	7cfb      	ldrb	r3, [r7, #19]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d15c      	bne.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001fe6:	4b2c      	ldr	r3, [pc, #176]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ff0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d01f      	beq.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001ffe:	697a      	ldr	r2, [r7, #20]
 8002000:	429a      	cmp	r2, r3
 8002002:	d019      	beq.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002004:	4b24      	ldr	r3, [pc, #144]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002006:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800200a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800200e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002010:	4b21      	ldr	r3, [pc, #132]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002012:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002016:	4a20      	ldr	r2, [pc, #128]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002018:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800201c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002020:	4b1d      	ldr	r3, [pc, #116]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002022:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002026:	4a1c      	ldr	r2, [pc, #112]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002028:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800202c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002030:	4a19      	ldr	r2, [pc, #100]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	2b00      	cmp	r3, #0
 8002040:	d016      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002042:	f7fe fd4f 	bl	8000ae4 <HAL_GetTick>
 8002046:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002048:	e00b      	b.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800204a:	f7fe fd4b 	bl	8000ae4 <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002058:	4293      	cmp	r3, r2
 800205a:	d902      	bls.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	74fb      	strb	r3, [r7, #19]
            break;
 8002060:	e006      	b.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002062:	4b0d      	ldr	r3, [pc, #52]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002064:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d0ec      	beq.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002070:	7cfb      	ldrb	r3, [r7, #19]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d10c      	bne.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002076:	4b08      	ldr	r3, [pc, #32]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002078:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800207c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002086:	4904      	ldr	r1, [pc, #16]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002088:	4313      	orrs	r3, r2
 800208a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800208e:	e009      	b.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002090:	7cfb      	ldrb	r3, [r7, #19]
 8002092:	74bb      	strb	r3, [r7, #18]
 8002094:	e006      	b.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002096:	bf00      	nop
 8002098:	40021000 	.word	0x40021000
 800209c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020a0:	7cfb      	ldrb	r3, [r7, #19]
 80020a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020a4:	7c7b      	ldrb	r3, [r7, #17]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d105      	bne.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020aa:	4b9e      	ldr	r3, [pc, #632]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ae:	4a9d      	ldr	r2, [pc, #628]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020b4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d00a      	beq.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020c2:	4b98      	ldr	r3, [pc, #608]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020c8:	f023 0203 	bic.w	r2, r3, #3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020d0:	4994      	ldr	r1, [pc, #592]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d00a      	beq.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020e4:	4b8f      	ldr	r3, [pc, #572]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020ea:	f023 020c 	bic.w	r2, r3, #12
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020f2:	498c      	ldr	r1, [pc, #560]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0304 	and.w	r3, r3, #4
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00a      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002106:	4b87      	ldr	r3, [pc, #540]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002108:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800210c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002114:	4983      	ldr	r1, [pc, #524]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002116:	4313      	orrs	r3, r2
 8002118:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0308 	and.w	r3, r3, #8
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00a      	beq.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002128:	4b7e      	ldr	r3, [pc, #504]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800212a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800212e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002136:	497b      	ldr	r1, [pc, #492]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002138:	4313      	orrs	r3, r2
 800213a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0310 	and.w	r3, r3, #16
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00a      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800214a:	4b76      	ldr	r3, [pc, #472]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800214c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002150:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002158:	4972      	ldr	r1, [pc, #456]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800215a:	4313      	orrs	r3, r2
 800215c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0320 	and.w	r3, r3, #32
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00a      	beq.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800216c:	4b6d      	ldr	r3, [pc, #436]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800216e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002172:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800217a:	496a      	ldr	r1, [pc, #424]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800217c:	4313      	orrs	r3, r2
 800217e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00a      	beq.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800218e:	4b65      	ldr	r3, [pc, #404]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002190:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002194:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800219c:	4961      	ldr	r1, [pc, #388]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d00a      	beq.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80021b0:	4b5c      	ldr	r3, [pc, #368]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021b6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021be:	4959      	ldr	r1, [pc, #356]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d00a      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021d2:	4b54      	ldr	r3, [pc, #336]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021d8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021e0:	4950      	ldr	r1, [pc, #320]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00a      	beq.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021f4:	4b4b      	ldr	r3, [pc, #300]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021fa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002202:	4948      	ldr	r1, [pc, #288]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002204:	4313      	orrs	r3, r2
 8002206:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00a      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002216:	4b43      	ldr	r3, [pc, #268]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002218:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800221c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002224:	493f      	ldr	r1, [pc, #252]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002226:	4313      	orrs	r3, r2
 8002228:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d028      	beq.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002238:	4b3a      	ldr	r3, [pc, #232]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800223a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800223e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002246:	4937      	ldr	r1, [pc, #220]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002248:	4313      	orrs	r3, r2
 800224a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002252:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002256:	d106      	bne.n	8002266 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002258:	4b32      	ldr	r3, [pc, #200]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	4a31      	ldr	r2, [pc, #196]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800225e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002262:	60d3      	str	r3, [r2, #12]
 8002264:	e011      	b.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800226a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800226e:	d10c      	bne.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3304      	adds	r3, #4
 8002274:	2101      	movs	r1, #1
 8002276:	4618      	mov	r0, r3
 8002278:	f000 f8c8 	bl	800240c <RCCEx_PLLSAI1_Config>
 800227c:	4603      	mov	r3, r0
 800227e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002280:	7cfb      	ldrb	r3, [r7, #19]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002286:	7cfb      	ldrb	r3, [r7, #19]
 8002288:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d028      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002296:	4b23      	ldr	r3, [pc, #140]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002298:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800229c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022a4:	491f      	ldr	r1, [pc, #124]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022b4:	d106      	bne.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	4a1a      	ldr	r2, [pc, #104]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022c0:	60d3      	str	r3, [r2, #12]
 80022c2:	e011      	b.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80022cc:	d10c      	bne.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	3304      	adds	r3, #4
 80022d2:	2101      	movs	r1, #1
 80022d4:	4618      	mov	r0, r3
 80022d6:	f000 f899 	bl	800240c <RCCEx_PLLSAI1_Config>
 80022da:	4603      	mov	r3, r0
 80022dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022de:	7cfb      	ldrb	r3, [r7, #19]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80022e4:	7cfb      	ldrb	r3, [r7, #19]
 80022e6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d02b      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002302:	4908      	ldr	r1, [pc, #32]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002304:	4313      	orrs	r3, r2
 8002306:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800230e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002312:	d109      	bne.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002314:	4b03      	ldr	r3, [pc, #12]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	4a02      	ldr	r2, [pc, #8]	@ (8002324 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800231a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800231e:	60d3      	str	r3, [r2, #12]
 8002320:	e014      	b.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002322:	bf00      	nop
 8002324:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800232c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002330:	d10c      	bne.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	3304      	adds	r3, #4
 8002336:	2101      	movs	r1, #1
 8002338:	4618      	mov	r0, r3
 800233a:	f000 f867 	bl	800240c <RCCEx_PLLSAI1_Config>
 800233e:	4603      	mov	r3, r0
 8002340:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002342:	7cfb      	ldrb	r3, [r7, #19]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002348:	7cfb      	ldrb	r3, [r7, #19]
 800234a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d02f      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002358:	4b2b      	ldr	r3, [pc, #172]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800235a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800235e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002366:	4928      	ldr	r1, [pc, #160]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002368:	4313      	orrs	r3, r2
 800236a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002372:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002376:	d10d      	bne.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3304      	adds	r3, #4
 800237c:	2102      	movs	r1, #2
 800237e:	4618      	mov	r0, r3
 8002380:	f000 f844 	bl	800240c <RCCEx_PLLSAI1_Config>
 8002384:	4603      	mov	r3, r0
 8002386:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002388:	7cfb      	ldrb	r3, [r7, #19]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d014      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800238e:	7cfb      	ldrb	r3, [r7, #19]
 8002390:	74bb      	strb	r3, [r7, #18]
 8002392:	e011      	b.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002398:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800239c:	d10c      	bne.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	3320      	adds	r3, #32
 80023a2:	2102      	movs	r1, #2
 80023a4:	4618      	mov	r0, r3
 80023a6:	f000 f925 	bl	80025f4 <RCCEx_PLLSAI2_Config>
 80023aa:	4603      	mov	r3, r0
 80023ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023ae:	7cfb      	ldrb	r3, [r7, #19]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80023b4:	7cfb      	ldrb	r3, [r7, #19]
 80023b6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00a      	beq.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80023c4:	4b10      	ldr	r3, [pc, #64]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ca:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80023d2:	490d      	ldr	r1, [pc, #52]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00b      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80023e6:	4b08      	ldr	r3, [pc, #32]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ec:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80023f6:	4904      	ldr	r1, [pc, #16]	@ (8002408 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80023fe:	7cbb      	ldrb	r3, [r7, #18]
}
 8002400:	4618      	mov	r0, r3
 8002402:	3718      	adds	r7, #24
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	40021000 	.word	0x40021000

0800240c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002416:	2300      	movs	r3, #0
 8002418:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800241a:	4b75      	ldr	r3, [pc, #468]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	f003 0303 	and.w	r3, r3, #3
 8002422:	2b00      	cmp	r3, #0
 8002424:	d018      	beq.n	8002458 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002426:	4b72      	ldr	r3, [pc, #456]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	f003 0203 	and.w	r2, r3, #3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	429a      	cmp	r2, r3
 8002434:	d10d      	bne.n	8002452 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
       ||
 800243a:	2b00      	cmp	r3, #0
 800243c:	d009      	beq.n	8002452 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800243e:	4b6c      	ldr	r3, [pc, #432]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	091b      	lsrs	r3, r3, #4
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	1c5a      	adds	r2, r3, #1
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
       ||
 800244e:	429a      	cmp	r2, r3
 8002450:	d047      	beq.n	80024e2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	73fb      	strb	r3, [r7, #15]
 8002456:	e044      	b.n	80024e2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2b03      	cmp	r3, #3
 800245e:	d018      	beq.n	8002492 <RCCEx_PLLSAI1_Config+0x86>
 8002460:	2b03      	cmp	r3, #3
 8002462:	d825      	bhi.n	80024b0 <RCCEx_PLLSAI1_Config+0xa4>
 8002464:	2b01      	cmp	r3, #1
 8002466:	d002      	beq.n	800246e <RCCEx_PLLSAI1_Config+0x62>
 8002468:	2b02      	cmp	r3, #2
 800246a:	d009      	beq.n	8002480 <RCCEx_PLLSAI1_Config+0x74>
 800246c:	e020      	b.n	80024b0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800246e:	4b60      	ldr	r3, [pc, #384]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d11d      	bne.n	80024b6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800247e:	e01a      	b.n	80024b6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002480:	4b5b      	ldr	r3, [pc, #364]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002488:	2b00      	cmp	r3, #0
 800248a:	d116      	bne.n	80024ba <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002490:	e013      	b.n	80024ba <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002492:	4b57      	ldr	r3, [pc, #348]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d10f      	bne.n	80024be <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800249e:	4b54      	ldr	r3, [pc, #336]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d109      	bne.n	80024be <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80024ae:	e006      	b.n	80024be <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	73fb      	strb	r3, [r7, #15]
      break;
 80024b4:	e004      	b.n	80024c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024b6:	bf00      	nop
 80024b8:	e002      	b.n	80024c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024ba:	bf00      	nop
 80024bc:	e000      	b.n	80024c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024be:	bf00      	nop
    }

    if(status == HAL_OK)
 80024c0:	7bfb      	ldrb	r3, [r7, #15]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10d      	bne.n	80024e2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80024c6:	4b4a      	ldr	r3, [pc, #296]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6819      	ldr	r1, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	3b01      	subs	r3, #1
 80024d8:	011b      	lsls	r3, r3, #4
 80024da:	430b      	orrs	r3, r1
 80024dc:	4944      	ldr	r1, [pc, #272]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80024e2:	7bfb      	ldrb	r3, [r7, #15]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d17d      	bne.n	80025e4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80024e8:	4b41      	ldr	r3, [pc, #260]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a40      	ldr	r2, [pc, #256]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024ee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80024f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024f4:	f7fe faf6 	bl	8000ae4 <HAL_GetTick>
 80024f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024fa:	e009      	b.n	8002510 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024fc:	f7fe faf2 	bl	8000ae4 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d902      	bls.n	8002510 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	73fb      	strb	r3, [r7, #15]
        break;
 800250e:	e005      	b.n	800251c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002510:	4b37      	ldr	r3, [pc, #220]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1ef      	bne.n	80024fc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800251c:	7bfb      	ldrb	r3, [r7, #15]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d160      	bne.n	80025e4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d111      	bne.n	800254c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002528:	4b31      	ldr	r3, [pc, #196]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002530:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6892      	ldr	r2, [r2, #8]
 8002538:	0211      	lsls	r1, r2, #8
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	68d2      	ldr	r2, [r2, #12]
 800253e:	0912      	lsrs	r2, r2, #4
 8002540:	0452      	lsls	r2, r2, #17
 8002542:	430a      	orrs	r2, r1
 8002544:	492a      	ldr	r1, [pc, #168]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002546:	4313      	orrs	r3, r2
 8002548:	610b      	str	r3, [r1, #16]
 800254a:	e027      	b.n	800259c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d112      	bne.n	8002578 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002552:	4b27      	ldr	r3, [pc, #156]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800255a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	6892      	ldr	r2, [r2, #8]
 8002562:	0211      	lsls	r1, r2, #8
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	6912      	ldr	r2, [r2, #16]
 8002568:	0852      	lsrs	r2, r2, #1
 800256a:	3a01      	subs	r2, #1
 800256c:	0552      	lsls	r2, r2, #21
 800256e:	430a      	orrs	r2, r1
 8002570:	491f      	ldr	r1, [pc, #124]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002572:	4313      	orrs	r3, r2
 8002574:	610b      	str	r3, [r1, #16]
 8002576:	e011      	b.n	800259c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002578:	4b1d      	ldr	r3, [pc, #116]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002580:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	6892      	ldr	r2, [r2, #8]
 8002588:	0211      	lsls	r1, r2, #8
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	6952      	ldr	r2, [r2, #20]
 800258e:	0852      	lsrs	r2, r2, #1
 8002590:	3a01      	subs	r2, #1
 8002592:	0652      	lsls	r2, r2, #25
 8002594:	430a      	orrs	r2, r1
 8002596:	4916      	ldr	r1, [pc, #88]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002598:	4313      	orrs	r3, r2
 800259a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800259c:	4b14      	ldr	r3, [pc, #80]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a13      	ldr	r2, [pc, #76]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025a2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80025a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a8:	f7fe fa9c 	bl	8000ae4 <HAL_GetTick>
 80025ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025ae:	e009      	b.n	80025c4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025b0:	f7fe fa98 	bl	8000ae4 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d902      	bls.n	80025c4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	73fb      	strb	r3, [r7, #15]
          break;
 80025c2:	e005      	b.n	80025d0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025c4:	4b0a      	ldr	r3, [pc, #40]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0ef      	beq.n	80025b0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80025d0:	7bfb      	ldrb	r3, [r7, #15]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d106      	bne.n	80025e4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80025d6:	4b06      	ldr	r3, [pc, #24]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025d8:	691a      	ldr	r2, [r3, #16]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	4904      	ldr	r1, [pc, #16]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80025e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	40021000 	.word	0x40021000

080025f4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025fe:	2300      	movs	r3, #0
 8002600:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002602:	4b6a      	ldr	r3, [pc, #424]	@ (80027ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	f003 0303 	and.w	r3, r3, #3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d018      	beq.n	8002640 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800260e:	4b67      	ldr	r3, [pc, #412]	@ (80027ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	f003 0203 	and.w	r2, r3, #3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	429a      	cmp	r2, r3
 800261c:	d10d      	bne.n	800263a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
       ||
 8002622:	2b00      	cmp	r3, #0
 8002624:	d009      	beq.n	800263a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002626:	4b61      	ldr	r3, [pc, #388]	@ (80027ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	091b      	lsrs	r3, r3, #4
 800262c:	f003 0307 	and.w	r3, r3, #7
 8002630:	1c5a      	adds	r2, r3, #1
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
       ||
 8002636:	429a      	cmp	r2, r3
 8002638:	d047      	beq.n	80026ca <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	73fb      	strb	r3, [r7, #15]
 800263e:	e044      	b.n	80026ca <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2b03      	cmp	r3, #3
 8002646:	d018      	beq.n	800267a <RCCEx_PLLSAI2_Config+0x86>
 8002648:	2b03      	cmp	r3, #3
 800264a:	d825      	bhi.n	8002698 <RCCEx_PLLSAI2_Config+0xa4>
 800264c:	2b01      	cmp	r3, #1
 800264e:	d002      	beq.n	8002656 <RCCEx_PLLSAI2_Config+0x62>
 8002650:	2b02      	cmp	r3, #2
 8002652:	d009      	beq.n	8002668 <RCCEx_PLLSAI2_Config+0x74>
 8002654:	e020      	b.n	8002698 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002656:	4b55      	ldr	r3, [pc, #340]	@ (80027ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d11d      	bne.n	800269e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002666:	e01a      	b.n	800269e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002668:	4b50      	ldr	r3, [pc, #320]	@ (80027ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002670:	2b00      	cmp	r3, #0
 8002672:	d116      	bne.n	80026a2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002678:	e013      	b.n	80026a2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800267a:	4b4c      	ldr	r3, [pc, #304]	@ (80027ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d10f      	bne.n	80026a6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002686:	4b49      	ldr	r3, [pc, #292]	@ (80027ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d109      	bne.n	80026a6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002696:	e006      	b.n	80026a6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	73fb      	strb	r3, [r7, #15]
      break;
 800269c:	e004      	b.n	80026a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800269e:	bf00      	nop
 80026a0:	e002      	b.n	80026a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026a2:	bf00      	nop
 80026a4:	e000      	b.n	80026a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80026a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80026a8:	7bfb      	ldrb	r3, [r7, #15]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10d      	bne.n	80026ca <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80026ae:	4b3f      	ldr	r3, [pc, #252]	@ (80027ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6819      	ldr	r1, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	3b01      	subs	r3, #1
 80026c0:	011b      	lsls	r3, r3, #4
 80026c2:	430b      	orrs	r3, r1
 80026c4:	4939      	ldr	r1, [pc, #228]	@ (80027ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80026ca:	7bfb      	ldrb	r3, [r7, #15]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d167      	bne.n	80027a0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80026d0:	4b36      	ldr	r3, [pc, #216]	@ (80027ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a35      	ldr	r2, [pc, #212]	@ (80027ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80026d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026dc:	f7fe fa02 	bl	8000ae4 <HAL_GetTick>
 80026e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80026e2:	e009      	b.n	80026f8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80026e4:	f7fe f9fe 	bl	8000ae4 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d902      	bls.n	80026f8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	73fb      	strb	r3, [r7, #15]
        break;
 80026f6:	e005      	b.n	8002704 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80026f8:	4b2c      	ldr	r3, [pc, #176]	@ (80027ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d1ef      	bne.n	80026e4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002704:	7bfb      	ldrb	r3, [r7, #15]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d14a      	bne.n	80027a0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d111      	bne.n	8002734 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002710:	4b26      	ldr	r3, [pc, #152]	@ (80027ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002712:	695b      	ldr	r3, [r3, #20]
 8002714:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002718:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	6892      	ldr	r2, [r2, #8]
 8002720:	0211      	lsls	r1, r2, #8
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	68d2      	ldr	r2, [r2, #12]
 8002726:	0912      	lsrs	r2, r2, #4
 8002728:	0452      	lsls	r2, r2, #17
 800272a:	430a      	orrs	r2, r1
 800272c:	491f      	ldr	r1, [pc, #124]	@ (80027ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800272e:	4313      	orrs	r3, r2
 8002730:	614b      	str	r3, [r1, #20]
 8002732:	e011      	b.n	8002758 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002734:	4b1d      	ldr	r3, [pc, #116]	@ (80027ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800273c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	6892      	ldr	r2, [r2, #8]
 8002744:	0211      	lsls	r1, r2, #8
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	6912      	ldr	r2, [r2, #16]
 800274a:	0852      	lsrs	r2, r2, #1
 800274c:	3a01      	subs	r2, #1
 800274e:	0652      	lsls	r2, r2, #25
 8002750:	430a      	orrs	r2, r1
 8002752:	4916      	ldr	r1, [pc, #88]	@ (80027ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002754:	4313      	orrs	r3, r2
 8002756:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002758:	4b14      	ldr	r3, [pc, #80]	@ (80027ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a13      	ldr	r2, [pc, #76]	@ (80027ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800275e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002762:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002764:	f7fe f9be 	bl	8000ae4 <HAL_GetTick>
 8002768:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800276a:	e009      	b.n	8002780 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800276c:	f7fe f9ba 	bl	8000ae4 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d902      	bls.n	8002780 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	73fb      	strb	r3, [r7, #15]
          break;
 800277e:	e005      	b.n	800278c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002780:	4b0a      	ldr	r3, [pc, #40]	@ (80027ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d0ef      	beq.n	800276c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800278c:	7bfb      	ldrb	r3, [r7, #15]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d106      	bne.n	80027a0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002792:	4b06      	ldr	r3, [pc, #24]	@ (80027ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8002794:	695a      	ldr	r2, [r3, #20]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	4904      	ldr	r1, [pc, #16]	@ (80027ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800279c:	4313      	orrs	r3, r2
 800279e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80027a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40021000 	.word	0x40021000

080027b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e040      	b.n	8002844 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d106      	bne.n	80027d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f7fe f86a 	bl	80008ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2224      	movs	r2, #36	@ 0x24
 80027dc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 0201 	bic.w	r2, r2, #1
 80027ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d002      	beq.n	80027fc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 fe5a 	bl	80034b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 fb9f 	bl	8002f40 <UART_SetConfig>
 8002802:	4603      	mov	r3, r0
 8002804:	2b01      	cmp	r3, #1
 8002806:	d101      	bne.n	800280c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e01b      	b.n	8002844 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	685a      	ldr	r2, [r3, #4]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800281a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689a      	ldr	r2, [r3, #8]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800282a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f042 0201 	orr.w	r2, r2, #1
 800283a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f000 fed9 	bl	80035f4 <UART_CheckIdleState>
 8002842:	4603      	mov	r3, r0
}
 8002844:	4618      	mov	r0, r3
 8002846:	3708      	adds	r7, #8
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800284c:	b480      	push	{r7}
 800284e:	b08b      	sub	sp, #44	@ 0x2c
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	4613      	mov	r3, r2
 8002858:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800285e:	2b20      	cmp	r3, #32
 8002860:	d147      	bne.n	80028f2 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d002      	beq.n	800286e <HAL_UART_Transmit_IT+0x22>
 8002868:	88fb      	ldrh	r3, [r7, #6]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e040      	b.n	80028f4 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	68ba      	ldr	r2, [r7, #8]
 8002876:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	88fa      	ldrh	r2, [r7, #6]
 800287c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	88fa      	ldrh	r2, [r7, #6]
 8002884:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2200      	movs	r2, #0
 800288c:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2221      	movs	r2, #33	@ 0x21
 800289a:	67da      	str	r2, [r3, #124]	@ 0x7c
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028a4:	d107      	bne.n	80028b6 <HAL_UART_Transmit_IT+0x6a>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d103      	bne.n	80028b6 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	4a13      	ldr	r2, [pc, #76]	@ (8002900 <HAL_UART_Transmit_IT+0xb4>)
 80028b2:	66da      	str	r2, [r3, #108]	@ 0x6c
 80028b4:	e002      	b.n	80028bc <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	4a12      	ldr	r2, [pc, #72]	@ (8002904 <HAL_UART_Transmit_IT+0xb8>)
 80028ba:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	e853 3f00 	ldrex	r3, [r3]
 80028c8:	613b      	str	r3, [r7, #16]
   return(result);
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	461a      	mov	r2, r3
 80028d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028da:	623b      	str	r3, [r7, #32]
 80028dc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028de:	69f9      	ldr	r1, [r7, #28]
 80028e0:	6a3a      	ldr	r2, [r7, #32]
 80028e2:	e841 2300 	strex	r3, r2, [r1]
 80028e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d1e6      	bne.n	80028bc <HAL_UART_Transmit_IT+0x70>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80028ee:	2300      	movs	r3, #0
 80028f0:	e000      	b.n	80028f4 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80028f2:	2302      	movs	r3, #2
  }
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	372c      	adds	r7, #44	@ 0x2c
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr
 8002900:	080039c9 	.word	0x080039c9
 8002904:	08003913 	.word	0x08003913

08002908 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b0ba      	sub	sp, #232	@ 0xe8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800292e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002932:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002936:	4013      	ands	r3, r2
 8002938:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800293c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002940:	2b00      	cmp	r3, #0
 8002942:	d115      	bne.n	8002970 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002948:	f003 0320 	and.w	r3, r3, #32
 800294c:	2b00      	cmp	r3, #0
 800294e:	d00f      	beq.n	8002970 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002954:	f003 0320 	and.w	r3, r3, #32
 8002958:	2b00      	cmp	r3, #0
 800295a:	d009      	beq.n	8002970 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002960:	2b00      	cmp	r3, #0
 8002962:	f000 82ca 	beq.w	8002efa <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	4798      	blx	r3
      }
      return;
 800296e:	e2c4      	b.n	8002efa <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002970:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 8117 	beq.w	8002ba8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800297a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	2b00      	cmp	r3, #0
 8002984:	d106      	bne.n	8002994 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002986:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800298a:	4b85      	ldr	r3, [pc, #532]	@ (8002ba0 <HAL_UART_IRQHandler+0x298>)
 800298c:	4013      	ands	r3, r2
 800298e:	2b00      	cmp	r3, #0
 8002990:	f000 810a 	beq.w	8002ba8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002998:	f003 0301 	and.w	r3, r3, #1
 800299c:	2b00      	cmp	r3, #0
 800299e:	d011      	beq.n	80029c4 <HAL_UART_IRQHandler+0xbc>
 80029a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00b      	beq.n	80029c4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2201      	movs	r2, #1
 80029b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029ba:	f043 0201 	orr.w	r2, r3, #1
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d011      	beq.n	80029f4 <HAL_UART_IRQHandler+0xec>
 80029d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d00b      	beq.n	80029f4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2202      	movs	r2, #2
 80029e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029ea:	f043 0204 	orr.w	r2, r3, #4
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029f8:	f003 0304 	and.w	r3, r3, #4
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d011      	beq.n	8002a24 <HAL_UART_IRQHandler+0x11c>
 8002a00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00b      	beq.n	8002a24 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2204      	movs	r2, #4
 8002a12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a1a:	f043 0202 	orr.w	r2, r3, #2
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002a24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a28:	f003 0308 	and.w	r3, r3, #8
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d017      	beq.n	8002a60 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a34:	f003 0320 	and.w	r3, r3, #32
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d105      	bne.n	8002a48 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002a3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a40:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00b      	beq.n	8002a60 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2208      	movs	r2, #8
 8002a4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a56:	f043 0208 	orr.w	r2, r3, #8
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d012      	beq.n	8002a92 <HAL_UART_IRQHandler+0x18a>
 8002a6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a70:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00c      	beq.n	8002a92 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002a80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a88:	f043 0220 	orr.w	r2, r3, #32
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 8230 	beq.w	8002efe <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002aa2:	f003 0320 	and.w	r3, r3, #32
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00d      	beq.n	8002ac6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002aaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002aae:	f003 0320 	and.w	r3, r3, #32
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d007      	beq.n	8002ac6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d003      	beq.n	8002ac6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002acc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ada:	2b40      	cmp	r3, #64	@ 0x40
 8002adc:	d005      	beq.n	8002aea <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002ade:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ae2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d04f      	beq.n	8002b8a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 fe97 	bl	800381e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002afa:	2b40      	cmp	r3, #64	@ 0x40
 8002afc:	d141      	bne.n	8002b82 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	3308      	adds	r3, #8
 8002b04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b08:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b0c:	e853 3f00 	ldrex	r3, [r3]
 8002b10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002b14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	3308      	adds	r3, #8
 8002b26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002b2a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002b2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002b36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002b3a:	e841 2300 	strex	r3, r2, [r1]
 8002b3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002b42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1d9      	bne.n	8002afe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d013      	beq.n	8002b7a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b56:	4a13      	ldr	r2, [pc, #76]	@ (8002ba4 <HAL_UART_IRQHandler+0x29c>)
 8002b58:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7fe f91b 	bl	8000d9a <HAL_DMA_Abort_IT>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d017      	beq.n	8002b9a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002b74:	4610      	mov	r0, r2
 8002b76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b78:	e00f      	b.n	8002b9a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f9ca 	bl	8002f14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b80:	e00b      	b.n	8002b9a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 f9c6 	bl	8002f14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b88:	e007      	b.n	8002b9a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 f9c2 	bl	8002f14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8002b98:	e1b1      	b.n	8002efe <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b9a:	bf00      	nop
    return;
 8002b9c:	e1af      	b.n	8002efe <HAL_UART_IRQHandler+0x5f6>
 8002b9e:	bf00      	nop
 8002ba0:	04000120 	.word	0x04000120
 8002ba4:	080038e7 	.word	0x080038e7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	f040 816a 	bne.w	8002e86 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002bb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bb6:	f003 0310 	and.w	r3, r3, #16
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 8163 	beq.w	8002e86 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002bc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bc4:	f003 0310 	and.w	r3, r3, #16
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f000 815c 	beq.w	8002e86 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2210      	movs	r2, #16
 8002bd4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002be0:	2b40      	cmp	r3, #64	@ 0x40
 8002be2:	f040 80d4 	bne.w	8002d8e <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002bf2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f000 80ad 	beq.w	8002d56 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002c02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c06:	429a      	cmp	r2, r3
 8002c08:	f080 80a5 	bcs.w	8002d56 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c12:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0320 	and.w	r3, r3, #32
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f040 8086 	bne.w	8002d34 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c30:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c34:	e853 3f00 	ldrex	r3, [r3]
 8002c38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002c3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002c52:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002c56:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c5a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002c5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002c62:	e841 2300 	strex	r3, r2, [r1]
 8002c66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002c6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1da      	bne.n	8002c28 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	3308      	adds	r3, #8
 8002c78:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c7c:	e853 3f00 	ldrex	r3, [r3]
 8002c80:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002c82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c84:	f023 0301 	bic.w	r3, r3, #1
 8002c88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	3308      	adds	r3, #8
 8002c92:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002c96:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002c9a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c9c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002c9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002ca2:	e841 2300 	strex	r3, r2, [r1]
 8002ca6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002ca8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1e1      	bne.n	8002c72 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	3308      	adds	r3, #8
 8002cb4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cb6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002cb8:	e853 3f00 	ldrex	r3, [r3]
 8002cbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002cbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002cc4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	3308      	adds	r3, #8
 8002cce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002cd2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002cd4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002cd8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002cda:	e841 2300 	strex	r3, r2, [r1]
 8002cde:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002ce0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d1e3      	bne.n	8002cae <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2220      	movs	r2, #32
 8002cea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002cfc:	e853 3f00 	ldrex	r3, [r3]
 8002d00:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002d02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d04:	f023 0310 	bic.w	r3, r3, #16
 8002d08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	461a      	mov	r2, r3
 8002d12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d16:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002d18:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d1a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002d1c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002d1e:	e841 2300 	strex	r3, r2, [r1]
 8002d22:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002d24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1e4      	bne.n	8002cf4 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fd fff5 	bl	8000d1e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2202      	movs	r2, #2
 8002d38:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 f8ea 	bl	8002f28 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002d54:	e0d5      	b.n	8002f02 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002d5c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002d60:	429a      	cmp	r2, r3
 8002d62:	f040 80ce 	bne.w	8002f02 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0320 	and.w	r3, r3, #32
 8002d72:	2b20      	cmp	r3, #32
 8002d74:	f040 80c5 	bne.w	8002f02 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002d84:	4619      	mov	r1, r3
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 f8ce 	bl	8002f28 <HAL_UARTEx_RxEventCallback>
      return;
 8002d8c:	e0b9      	b.n	8002f02 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	f000 80ab 	beq.w	8002f06 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8002db0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f000 80a6 	beq.w	8002f06 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dc2:	e853 3f00 	ldrex	r3, [r3]
 8002dc6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002dc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002dce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002ddc:	647b      	str	r3, [r7, #68]	@ 0x44
 8002dde:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002de2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002de4:	e841 2300 	strex	r3, r2, [r1]
 8002de8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002dea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1e4      	bne.n	8002dba <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	3308      	adds	r3, #8
 8002df6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfa:	e853 3f00 	ldrex	r3, [r3]
 8002dfe:	623b      	str	r3, [r7, #32]
   return(result);
 8002e00:	6a3b      	ldr	r3, [r7, #32]
 8002e02:	f023 0301 	bic.w	r3, r3, #1
 8002e06:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	3308      	adds	r3, #8
 8002e10:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002e14:	633a      	str	r2, [r7, #48]	@ 0x30
 8002e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e18:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e1c:	e841 2300 	strex	r3, r2, [r1]
 8002e20:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1e3      	bne.n	8002df0 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2220      	movs	r2, #32
 8002e2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	e853 3f00 	ldrex	r3, [r3]
 8002e48:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f023 0310 	bic.w	r3, r3, #16
 8002e50:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	461a      	mov	r2, r3
 8002e5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e5e:	61fb      	str	r3, [r7, #28]
 8002e60:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e62:	69b9      	ldr	r1, [r7, #24]
 8002e64:	69fa      	ldr	r2, [r7, #28]
 8002e66:	e841 2300 	strex	r3, r2, [r1]
 8002e6a:	617b      	str	r3, [r7, #20]
   return(result);
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1e4      	bne.n	8002e3c <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2202      	movs	r2, #2
 8002e76:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 f852 	bl	8002f28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e84:	e03f      	b.n	8002f06 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00e      	beq.n	8002eb0 <HAL_UART_IRQHandler+0x5a8>
 8002e92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d008      	beq.n	8002eb0 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002ea6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 fe17 	bl	8003adc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002eae:	e02d      	b.n	8002f0c <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002eb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002eb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00e      	beq.n	8002eda <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002ebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ec0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d008      	beq.n	8002eda <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d01c      	beq.n	8002f0a <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	4798      	blx	r3
    }
    return;
 8002ed8:	e017      	b.n	8002f0a <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ede:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d012      	beq.n	8002f0c <HAL_UART_IRQHandler+0x604>
 8002ee6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002eea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00c      	beq.n	8002f0c <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 fdc8 	bl	8003a88 <UART_EndTransmit_IT>
    return;
 8002ef8:	e008      	b.n	8002f0c <HAL_UART_IRQHandler+0x604>
      return;
 8002efa:	bf00      	nop
 8002efc:	e006      	b.n	8002f0c <HAL_UART_IRQHandler+0x604>
    return;
 8002efe:	bf00      	nop
 8002f00:	e004      	b.n	8002f0c <HAL_UART_IRQHandler+0x604>
      return;
 8002f02:	bf00      	nop
 8002f04:	e002      	b.n	8002f0c <HAL_UART_IRQHandler+0x604>
      return;
 8002f06:	bf00      	nop
 8002f08:	e000      	b.n	8002f0c <HAL_UART_IRQHandler+0x604>
    return;
 8002f0a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8002f0c:	37e8      	adds	r7, #232	@ 0xe8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop

08002f14 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	460b      	mov	r3, r1
 8002f32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f44:	b08a      	sub	sp, #40	@ 0x28
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	431a      	orrs	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	69db      	ldr	r3, [r3, #28]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	4ba4      	ldr	r3, [pc, #656]	@ (8003200 <UART_SetConfig+0x2c0>)
 8002f70:	4013      	ands	r3, r2
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	6812      	ldr	r2, [r2, #0]
 8002f76:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f78:	430b      	orrs	r3, r1
 8002f7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	68da      	ldr	r2, [r3, #12]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a99      	ldr	r2, [pc, #612]	@ (8003204 <UART_SetConfig+0x2c4>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d004      	beq.n	8002fac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a90      	ldr	r2, [pc, #576]	@ (8003208 <UART_SetConfig+0x2c8>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d126      	bne.n	8003018 <UART_SetConfig+0xd8>
 8002fca:	4b90      	ldr	r3, [pc, #576]	@ (800320c <UART_SetConfig+0x2cc>)
 8002fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fd0:	f003 0303 	and.w	r3, r3, #3
 8002fd4:	2b03      	cmp	r3, #3
 8002fd6:	d81b      	bhi.n	8003010 <UART_SetConfig+0xd0>
 8002fd8:	a201      	add	r2, pc, #4	@ (adr r2, 8002fe0 <UART_SetConfig+0xa0>)
 8002fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fde:	bf00      	nop
 8002fe0:	08002ff1 	.word	0x08002ff1
 8002fe4:	08003001 	.word	0x08003001
 8002fe8:	08002ff9 	.word	0x08002ff9
 8002fec:	08003009 	.word	0x08003009
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ff6:	e116      	b.n	8003226 <UART_SetConfig+0x2e6>
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ffe:	e112      	b.n	8003226 <UART_SetConfig+0x2e6>
 8003000:	2304      	movs	r3, #4
 8003002:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003006:	e10e      	b.n	8003226 <UART_SetConfig+0x2e6>
 8003008:	2308      	movs	r3, #8
 800300a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800300e:	e10a      	b.n	8003226 <UART_SetConfig+0x2e6>
 8003010:	2310      	movs	r3, #16
 8003012:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003016:	e106      	b.n	8003226 <UART_SetConfig+0x2e6>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a7c      	ldr	r2, [pc, #496]	@ (8003210 <UART_SetConfig+0x2d0>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d138      	bne.n	8003094 <UART_SetConfig+0x154>
 8003022:	4b7a      	ldr	r3, [pc, #488]	@ (800320c <UART_SetConfig+0x2cc>)
 8003024:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003028:	f003 030c 	and.w	r3, r3, #12
 800302c:	2b0c      	cmp	r3, #12
 800302e:	d82d      	bhi.n	800308c <UART_SetConfig+0x14c>
 8003030:	a201      	add	r2, pc, #4	@ (adr r2, 8003038 <UART_SetConfig+0xf8>)
 8003032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003036:	bf00      	nop
 8003038:	0800306d 	.word	0x0800306d
 800303c:	0800308d 	.word	0x0800308d
 8003040:	0800308d 	.word	0x0800308d
 8003044:	0800308d 	.word	0x0800308d
 8003048:	0800307d 	.word	0x0800307d
 800304c:	0800308d 	.word	0x0800308d
 8003050:	0800308d 	.word	0x0800308d
 8003054:	0800308d 	.word	0x0800308d
 8003058:	08003075 	.word	0x08003075
 800305c:	0800308d 	.word	0x0800308d
 8003060:	0800308d 	.word	0x0800308d
 8003064:	0800308d 	.word	0x0800308d
 8003068:	08003085 	.word	0x08003085
 800306c:	2300      	movs	r3, #0
 800306e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003072:	e0d8      	b.n	8003226 <UART_SetConfig+0x2e6>
 8003074:	2302      	movs	r3, #2
 8003076:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800307a:	e0d4      	b.n	8003226 <UART_SetConfig+0x2e6>
 800307c:	2304      	movs	r3, #4
 800307e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003082:	e0d0      	b.n	8003226 <UART_SetConfig+0x2e6>
 8003084:	2308      	movs	r3, #8
 8003086:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800308a:	e0cc      	b.n	8003226 <UART_SetConfig+0x2e6>
 800308c:	2310      	movs	r3, #16
 800308e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003092:	e0c8      	b.n	8003226 <UART_SetConfig+0x2e6>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a5e      	ldr	r2, [pc, #376]	@ (8003214 <UART_SetConfig+0x2d4>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d125      	bne.n	80030ea <UART_SetConfig+0x1aa>
 800309e:	4b5b      	ldr	r3, [pc, #364]	@ (800320c <UART_SetConfig+0x2cc>)
 80030a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030a4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80030a8:	2b30      	cmp	r3, #48	@ 0x30
 80030aa:	d016      	beq.n	80030da <UART_SetConfig+0x19a>
 80030ac:	2b30      	cmp	r3, #48	@ 0x30
 80030ae:	d818      	bhi.n	80030e2 <UART_SetConfig+0x1a2>
 80030b0:	2b20      	cmp	r3, #32
 80030b2:	d00a      	beq.n	80030ca <UART_SetConfig+0x18a>
 80030b4:	2b20      	cmp	r3, #32
 80030b6:	d814      	bhi.n	80030e2 <UART_SetConfig+0x1a2>
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d002      	beq.n	80030c2 <UART_SetConfig+0x182>
 80030bc:	2b10      	cmp	r3, #16
 80030be:	d008      	beq.n	80030d2 <UART_SetConfig+0x192>
 80030c0:	e00f      	b.n	80030e2 <UART_SetConfig+0x1a2>
 80030c2:	2300      	movs	r3, #0
 80030c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030c8:	e0ad      	b.n	8003226 <UART_SetConfig+0x2e6>
 80030ca:	2302      	movs	r3, #2
 80030cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030d0:	e0a9      	b.n	8003226 <UART_SetConfig+0x2e6>
 80030d2:	2304      	movs	r3, #4
 80030d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030d8:	e0a5      	b.n	8003226 <UART_SetConfig+0x2e6>
 80030da:	2308      	movs	r3, #8
 80030dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030e0:	e0a1      	b.n	8003226 <UART_SetConfig+0x2e6>
 80030e2:	2310      	movs	r3, #16
 80030e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030e8:	e09d      	b.n	8003226 <UART_SetConfig+0x2e6>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a4a      	ldr	r2, [pc, #296]	@ (8003218 <UART_SetConfig+0x2d8>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d125      	bne.n	8003140 <UART_SetConfig+0x200>
 80030f4:	4b45      	ldr	r3, [pc, #276]	@ (800320c <UART_SetConfig+0x2cc>)
 80030f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030fa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80030fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8003100:	d016      	beq.n	8003130 <UART_SetConfig+0x1f0>
 8003102:	2bc0      	cmp	r3, #192	@ 0xc0
 8003104:	d818      	bhi.n	8003138 <UART_SetConfig+0x1f8>
 8003106:	2b80      	cmp	r3, #128	@ 0x80
 8003108:	d00a      	beq.n	8003120 <UART_SetConfig+0x1e0>
 800310a:	2b80      	cmp	r3, #128	@ 0x80
 800310c:	d814      	bhi.n	8003138 <UART_SetConfig+0x1f8>
 800310e:	2b00      	cmp	r3, #0
 8003110:	d002      	beq.n	8003118 <UART_SetConfig+0x1d8>
 8003112:	2b40      	cmp	r3, #64	@ 0x40
 8003114:	d008      	beq.n	8003128 <UART_SetConfig+0x1e8>
 8003116:	e00f      	b.n	8003138 <UART_SetConfig+0x1f8>
 8003118:	2300      	movs	r3, #0
 800311a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800311e:	e082      	b.n	8003226 <UART_SetConfig+0x2e6>
 8003120:	2302      	movs	r3, #2
 8003122:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003126:	e07e      	b.n	8003226 <UART_SetConfig+0x2e6>
 8003128:	2304      	movs	r3, #4
 800312a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800312e:	e07a      	b.n	8003226 <UART_SetConfig+0x2e6>
 8003130:	2308      	movs	r3, #8
 8003132:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003136:	e076      	b.n	8003226 <UART_SetConfig+0x2e6>
 8003138:	2310      	movs	r3, #16
 800313a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800313e:	e072      	b.n	8003226 <UART_SetConfig+0x2e6>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a35      	ldr	r2, [pc, #212]	@ (800321c <UART_SetConfig+0x2dc>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d12a      	bne.n	80031a0 <UART_SetConfig+0x260>
 800314a:	4b30      	ldr	r3, [pc, #192]	@ (800320c <UART_SetConfig+0x2cc>)
 800314c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003150:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003154:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003158:	d01a      	beq.n	8003190 <UART_SetConfig+0x250>
 800315a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800315e:	d81b      	bhi.n	8003198 <UART_SetConfig+0x258>
 8003160:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003164:	d00c      	beq.n	8003180 <UART_SetConfig+0x240>
 8003166:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800316a:	d815      	bhi.n	8003198 <UART_SetConfig+0x258>
 800316c:	2b00      	cmp	r3, #0
 800316e:	d003      	beq.n	8003178 <UART_SetConfig+0x238>
 8003170:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003174:	d008      	beq.n	8003188 <UART_SetConfig+0x248>
 8003176:	e00f      	b.n	8003198 <UART_SetConfig+0x258>
 8003178:	2300      	movs	r3, #0
 800317a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800317e:	e052      	b.n	8003226 <UART_SetConfig+0x2e6>
 8003180:	2302      	movs	r3, #2
 8003182:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003186:	e04e      	b.n	8003226 <UART_SetConfig+0x2e6>
 8003188:	2304      	movs	r3, #4
 800318a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800318e:	e04a      	b.n	8003226 <UART_SetConfig+0x2e6>
 8003190:	2308      	movs	r3, #8
 8003192:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003196:	e046      	b.n	8003226 <UART_SetConfig+0x2e6>
 8003198:	2310      	movs	r3, #16
 800319a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800319e:	e042      	b.n	8003226 <UART_SetConfig+0x2e6>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a17      	ldr	r2, [pc, #92]	@ (8003204 <UART_SetConfig+0x2c4>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d13a      	bne.n	8003220 <UART_SetConfig+0x2e0>
 80031aa:	4b18      	ldr	r3, [pc, #96]	@ (800320c <UART_SetConfig+0x2cc>)
 80031ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031b0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80031b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80031b8:	d01a      	beq.n	80031f0 <UART_SetConfig+0x2b0>
 80031ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80031be:	d81b      	bhi.n	80031f8 <UART_SetConfig+0x2b8>
 80031c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031c4:	d00c      	beq.n	80031e0 <UART_SetConfig+0x2a0>
 80031c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031ca:	d815      	bhi.n	80031f8 <UART_SetConfig+0x2b8>
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d003      	beq.n	80031d8 <UART_SetConfig+0x298>
 80031d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031d4:	d008      	beq.n	80031e8 <UART_SetConfig+0x2a8>
 80031d6:	e00f      	b.n	80031f8 <UART_SetConfig+0x2b8>
 80031d8:	2300      	movs	r3, #0
 80031da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031de:	e022      	b.n	8003226 <UART_SetConfig+0x2e6>
 80031e0:	2302      	movs	r3, #2
 80031e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031e6:	e01e      	b.n	8003226 <UART_SetConfig+0x2e6>
 80031e8:	2304      	movs	r3, #4
 80031ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031ee:	e01a      	b.n	8003226 <UART_SetConfig+0x2e6>
 80031f0:	2308      	movs	r3, #8
 80031f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031f6:	e016      	b.n	8003226 <UART_SetConfig+0x2e6>
 80031f8:	2310      	movs	r3, #16
 80031fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031fe:	e012      	b.n	8003226 <UART_SetConfig+0x2e6>
 8003200:	efff69f3 	.word	0xefff69f3
 8003204:	40008000 	.word	0x40008000
 8003208:	40013800 	.word	0x40013800
 800320c:	40021000 	.word	0x40021000
 8003210:	40004400 	.word	0x40004400
 8003214:	40004800 	.word	0x40004800
 8003218:	40004c00 	.word	0x40004c00
 800321c:	40005000 	.word	0x40005000
 8003220:	2310      	movs	r3, #16
 8003222:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a9f      	ldr	r2, [pc, #636]	@ (80034a8 <UART_SetConfig+0x568>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d17a      	bne.n	8003326 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003230:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003234:	2b08      	cmp	r3, #8
 8003236:	d824      	bhi.n	8003282 <UART_SetConfig+0x342>
 8003238:	a201      	add	r2, pc, #4	@ (adr r2, 8003240 <UART_SetConfig+0x300>)
 800323a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800323e:	bf00      	nop
 8003240:	08003265 	.word	0x08003265
 8003244:	08003283 	.word	0x08003283
 8003248:	0800326d 	.word	0x0800326d
 800324c:	08003283 	.word	0x08003283
 8003250:	08003273 	.word	0x08003273
 8003254:	08003283 	.word	0x08003283
 8003258:	08003283 	.word	0x08003283
 800325c:	08003283 	.word	0x08003283
 8003260:	0800327b 	.word	0x0800327b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003264:	f7fe fd5c 	bl	8001d20 <HAL_RCC_GetPCLK1Freq>
 8003268:	61f8      	str	r0, [r7, #28]
        break;
 800326a:	e010      	b.n	800328e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800326c:	4b8f      	ldr	r3, [pc, #572]	@ (80034ac <UART_SetConfig+0x56c>)
 800326e:	61fb      	str	r3, [r7, #28]
        break;
 8003270:	e00d      	b.n	800328e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003272:	f7fe fcbd 	bl	8001bf0 <HAL_RCC_GetSysClockFreq>
 8003276:	61f8      	str	r0, [r7, #28]
        break;
 8003278:	e009      	b.n	800328e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800327a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800327e:	61fb      	str	r3, [r7, #28]
        break;
 8003280:	e005      	b.n	800328e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003282:	2300      	movs	r3, #0
 8003284:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800328c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	2b00      	cmp	r3, #0
 8003292:	f000 80fb 	beq.w	800348c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	685a      	ldr	r2, [r3, #4]
 800329a:	4613      	mov	r3, r2
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	4413      	add	r3, r2
 80032a0:	69fa      	ldr	r2, [r7, #28]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d305      	bcc.n	80032b2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80032ac:	69fa      	ldr	r2, [r7, #28]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d903      	bls.n	80032ba <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80032b8:	e0e8      	b.n	800348c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	2200      	movs	r2, #0
 80032be:	461c      	mov	r4, r3
 80032c0:	4615      	mov	r5, r2
 80032c2:	f04f 0200 	mov.w	r2, #0
 80032c6:	f04f 0300 	mov.w	r3, #0
 80032ca:	022b      	lsls	r3, r5, #8
 80032cc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80032d0:	0222      	lsls	r2, r4, #8
 80032d2:	68f9      	ldr	r1, [r7, #12]
 80032d4:	6849      	ldr	r1, [r1, #4]
 80032d6:	0849      	lsrs	r1, r1, #1
 80032d8:	2000      	movs	r0, #0
 80032da:	4688      	mov	r8, r1
 80032dc:	4681      	mov	r9, r0
 80032de:	eb12 0a08 	adds.w	sl, r2, r8
 80032e2:	eb43 0b09 	adc.w	fp, r3, r9
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	603b      	str	r3, [r7, #0]
 80032ee:	607a      	str	r2, [r7, #4]
 80032f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80032f4:	4650      	mov	r0, sl
 80032f6:	4659      	mov	r1, fp
 80032f8:	f7fc ff66 	bl	80001c8 <__aeabi_uldivmod>
 80032fc:	4602      	mov	r2, r0
 80032fe:	460b      	mov	r3, r1
 8003300:	4613      	mov	r3, r2
 8003302:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800330a:	d308      	bcc.n	800331e <UART_SetConfig+0x3de>
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003312:	d204      	bcs.n	800331e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	60da      	str	r2, [r3, #12]
 800331c:	e0b6      	b.n	800348c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003324:	e0b2      	b.n	800348c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	69db      	ldr	r3, [r3, #28]
 800332a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800332e:	d15e      	bne.n	80033ee <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003330:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003334:	2b08      	cmp	r3, #8
 8003336:	d828      	bhi.n	800338a <UART_SetConfig+0x44a>
 8003338:	a201      	add	r2, pc, #4	@ (adr r2, 8003340 <UART_SetConfig+0x400>)
 800333a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800333e:	bf00      	nop
 8003340:	08003365 	.word	0x08003365
 8003344:	0800336d 	.word	0x0800336d
 8003348:	08003375 	.word	0x08003375
 800334c:	0800338b 	.word	0x0800338b
 8003350:	0800337b 	.word	0x0800337b
 8003354:	0800338b 	.word	0x0800338b
 8003358:	0800338b 	.word	0x0800338b
 800335c:	0800338b 	.word	0x0800338b
 8003360:	08003383 	.word	0x08003383
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003364:	f7fe fcdc 	bl	8001d20 <HAL_RCC_GetPCLK1Freq>
 8003368:	61f8      	str	r0, [r7, #28]
        break;
 800336a:	e014      	b.n	8003396 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800336c:	f7fe fcee 	bl	8001d4c <HAL_RCC_GetPCLK2Freq>
 8003370:	61f8      	str	r0, [r7, #28]
        break;
 8003372:	e010      	b.n	8003396 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003374:	4b4d      	ldr	r3, [pc, #308]	@ (80034ac <UART_SetConfig+0x56c>)
 8003376:	61fb      	str	r3, [r7, #28]
        break;
 8003378:	e00d      	b.n	8003396 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800337a:	f7fe fc39 	bl	8001bf0 <HAL_RCC_GetSysClockFreq>
 800337e:	61f8      	str	r0, [r7, #28]
        break;
 8003380:	e009      	b.n	8003396 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003382:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003386:	61fb      	str	r3, [r7, #28]
        break;
 8003388:	e005      	b.n	8003396 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800338a:	2300      	movs	r3, #0
 800338c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003394:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d077      	beq.n	800348c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	005a      	lsls	r2, r3, #1
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	085b      	lsrs	r3, r3, #1
 80033a6:	441a      	add	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	2b0f      	cmp	r3, #15
 80033b6:	d916      	bls.n	80033e6 <UART_SetConfig+0x4a6>
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033be:	d212      	bcs.n	80033e6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	f023 030f 	bic.w	r3, r3, #15
 80033c8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	085b      	lsrs	r3, r3, #1
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	b29a      	uxth	r2, r3
 80033d6:	8afb      	ldrh	r3, [r7, #22]
 80033d8:	4313      	orrs	r3, r2
 80033da:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	8afa      	ldrh	r2, [r7, #22]
 80033e2:	60da      	str	r2, [r3, #12]
 80033e4:	e052      	b.n	800348c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80033ec:	e04e      	b.n	800348c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80033ee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80033f2:	2b08      	cmp	r3, #8
 80033f4:	d827      	bhi.n	8003446 <UART_SetConfig+0x506>
 80033f6:	a201      	add	r2, pc, #4	@ (adr r2, 80033fc <UART_SetConfig+0x4bc>)
 80033f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033fc:	08003421 	.word	0x08003421
 8003400:	08003429 	.word	0x08003429
 8003404:	08003431 	.word	0x08003431
 8003408:	08003447 	.word	0x08003447
 800340c:	08003437 	.word	0x08003437
 8003410:	08003447 	.word	0x08003447
 8003414:	08003447 	.word	0x08003447
 8003418:	08003447 	.word	0x08003447
 800341c:	0800343f 	.word	0x0800343f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003420:	f7fe fc7e 	bl	8001d20 <HAL_RCC_GetPCLK1Freq>
 8003424:	61f8      	str	r0, [r7, #28]
        break;
 8003426:	e014      	b.n	8003452 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003428:	f7fe fc90 	bl	8001d4c <HAL_RCC_GetPCLK2Freq>
 800342c:	61f8      	str	r0, [r7, #28]
        break;
 800342e:	e010      	b.n	8003452 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003430:	4b1e      	ldr	r3, [pc, #120]	@ (80034ac <UART_SetConfig+0x56c>)
 8003432:	61fb      	str	r3, [r7, #28]
        break;
 8003434:	e00d      	b.n	8003452 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003436:	f7fe fbdb 	bl	8001bf0 <HAL_RCC_GetSysClockFreq>
 800343a:	61f8      	str	r0, [r7, #28]
        break;
 800343c:	e009      	b.n	8003452 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800343e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003442:	61fb      	str	r3, [r7, #28]
        break;
 8003444:	e005      	b.n	8003452 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003446:	2300      	movs	r3, #0
 8003448:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003450:	bf00      	nop
    }

    if (pclk != 0U)
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d019      	beq.n	800348c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	085a      	lsrs	r2, r3, #1
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	441a      	add	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	fbb2 f3f3 	udiv	r3, r2, r3
 800346a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	2b0f      	cmp	r3, #15
 8003470:	d909      	bls.n	8003486 <UART_SetConfig+0x546>
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003478:	d205      	bcs.n	8003486 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	b29a      	uxth	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	60da      	str	r2, [r3, #12]
 8003484:	e002      	b.n	800348c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003498:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800349c:	4618      	mov	r0, r3
 800349e:	3728      	adds	r7, #40	@ 0x28
 80034a0:	46bd      	mov	sp, r7
 80034a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034a6:	bf00      	nop
 80034a8:	40008000 	.word	0x40008000
 80034ac:	00f42400 	.word	0x00f42400

080034b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034bc:	f003 0308 	and.w	r3, r3, #8
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00a      	beq.n	80034da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00a      	beq.n	80034fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	430a      	orrs	r2, r1
 80034fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00a      	beq.n	800351e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	430a      	orrs	r2, r1
 800351c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003522:	f003 0304 	and.w	r3, r3, #4
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00a      	beq.n	8003540 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	430a      	orrs	r2, r1
 800353e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003544:	f003 0310 	and.w	r3, r3, #16
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00a      	beq.n	8003562 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	430a      	orrs	r2, r1
 8003560:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003566:	f003 0320 	and.w	r3, r3, #32
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00a      	beq.n	8003584 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	430a      	orrs	r2, r1
 8003582:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800358c:	2b00      	cmp	r3, #0
 800358e:	d01a      	beq.n	80035c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	430a      	orrs	r2, r1
 80035a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035ae:	d10a      	bne.n	80035c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	430a      	orrs	r2, r1
 80035c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00a      	beq.n	80035e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	430a      	orrs	r2, r1
 80035e6:	605a      	str	r2, [r3, #4]
  }
}
 80035e8:	bf00      	nop
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b098      	sub	sp, #96	@ 0x60
 80035f8:	af02      	add	r7, sp, #8
 80035fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003604:	f7fd fa6e 	bl	8000ae4 <HAL_GetTick>
 8003608:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0308 	and.w	r3, r3, #8
 8003614:	2b08      	cmp	r3, #8
 8003616:	d12e      	bne.n	8003676 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003618:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800361c:	9300      	str	r3, [sp, #0]
 800361e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003620:	2200      	movs	r2, #0
 8003622:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 f88c 	bl	8003744 <UART_WaitOnFlagUntilTimeout>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d021      	beq.n	8003676 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800363a:	e853 3f00 	ldrex	r3, [r3]
 800363e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003642:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003646:	653b      	str	r3, [r7, #80]	@ 0x50
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	461a      	mov	r2, r3
 800364e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003650:	647b      	str	r3, [r7, #68]	@ 0x44
 8003652:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003654:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003656:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003658:	e841 2300 	strex	r3, r2, [r1]
 800365c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800365e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003660:	2b00      	cmp	r3, #0
 8003662:	d1e6      	bne.n	8003632 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2220      	movs	r2, #32
 8003668:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e062      	b.n	800373c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0304 	and.w	r3, r3, #4
 8003680:	2b04      	cmp	r3, #4
 8003682:	d149      	bne.n	8003718 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003684:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003688:	9300      	str	r3, [sp, #0]
 800368a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800368c:	2200      	movs	r2, #0
 800368e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f856 	bl	8003744 <UART_WaitOnFlagUntilTimeout>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d03c      	beq.n	8003718 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a6:	e853 3f00 	ldrex	r3, [r3]
 80036aa:	623b      	str	r3, [r7, #32]
   return(result);
 80036ac:	6a3b      	ldr	r3, [r7, #32]
 80036ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	461a      	mov	r2, r3
 80036ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80036be:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80036c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036c4:	e841 2300 	strex	r3, r2, [r1]
 80036c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80036ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1e6      	bne.n	800369e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	3308      	adds	r3, #8
 80036d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	e853 3f00 	ldrex	r3, [r3]
 80036de:	60fb      	str	r3, [r7, #12]
   return(result);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f023 0301 	bic.w	r3, r3, #1
 80036e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	3308      	adds	r3, #8
 80036ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80036f0:	61fa      	str	r2, [r7, #28]
 80036f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f4:	69b9      	ldr	r1, [r7, #24]
 80036f6:	69fa      	ldr	r2, [r7, #28]
 80036f8:	e841 2300 	strex	r3, r2, [r1]
 80036fc:	617b      	str	r3, [r7, #20]
   return(result);
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d1e5      	bne.n	80036d0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2220      	movs	r2, #32
 8003708:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e011      	b.n	800373c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2220      	movs	r2, #32
 800371c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2220      	movs	r2, #32
 8003722:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3758      	adds	r7, #88	@ 0x58
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	603b      	str	r3, [r7, #0]
 8003750:	4613      	mov	r3, r2
 8003752:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003754:	e04f      	b.n	80037f6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800375c:	d04b      	beq.n	80037f6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800375e:	f7fd f9c1 	bl	8000ae4 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	429a      	cmp	r2, r3
 800376c:	d302      	bcc.n	8003774 <UART_WaitOnFlagUntilTimeout+0x30>
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d101      	bne.n	8003778 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e04e      	b.n	8003816 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0304 	and.w	r3, r3, #4
 8003782:	2b00      	cmp	r3, #0
 8003784:	d037      	beq.n	80037f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	2b80      	cmp	r3, #128	@ 0x80
 800378a:	d034      	beq.n	80037f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	2b40      	cmp	r3, #64	@ 0x40
 8003790:	d031      	beq.n	80037f6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	69db      	ldr	r3, [r3, #28]
 8003798:	f003 0308 	and.w	r3, r3, #8
 800379c:	2b08      	cmp	r3, #8
 800379e:	d110      	bne.n	80037c2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2208      	movs	r2, #8
 80037a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f000 f838 	bl	800381e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2208      	movs	r2, #8
 80037b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e029      	b.n	8003816 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	69db      	ldr	r3, [r3, #28]
 80037c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037d0:	d111      	bne.n	80037f6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80037da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f000 f81e 	bl	800381e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2220      	movs	r2, #32
 80037e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e00f      	b.n	8003816 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	69da      	ldr	r2, [r3, #28]
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	4013      	ands	r3, r2
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	429a      	cmp	r2, r3
 8003804:	bf0c      	ite	eq
 8003806:	2301      	moveq	r3, #1
 8003808:	2300      	movne	r3, #0
 800380a:	b2db      	uxtb	r3, r3
 800380c:	461a      	mov	r2, r3
 800380e:	79fb      	ldrb	r3, [r7, #7]
 8003810:	429a      	cmp	r2, r3
 8003812:	d0a0      	beq.n	8003756 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800381e:	b480      	push	{r7}
 8003820:	b095      	sub	sp, #84	@ 0x54
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800382e:	e853 3f00 	ldrex	r3, [r3]
 8003832:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003836:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800383a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	461a      	mov	r2, r3
 8003842:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003844:	643b      	str	r3, [r7, #64]	@ 0x40
 8003846:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003848:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800384a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800384c:	e841 2300 	strex	r3, r2, [r1]
 8003850:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1e6      	bne.n	8003826 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	3308      	adds	r3, #8
 800385e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003860:	6a3b      	ldr	r3, [r7, #32]
 8003862:	e853 3f00 	ldrex	r3, [r3]
 8003866:	61fb      	str	r3, [r7, #28]
   return(result);
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	f023 0301 	bic.w	r3, r3, #1
 800386e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	3308      	adds	r3, #8
 8003876:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003878:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800387a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800387e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003880:	e841 2300 	strex	r3, r2, [r1]
 8003884:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1e5      	bne.n	8003858 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003890:	2b01      	cmp	r3, #1
 8003892:	d118      	bne.n	80038c6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	e853 3f00 	ldrex	r3, [r3]
 80038a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	f023 0310 	bic.w	r3, r3, #16
 80038a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	461a      	mov	r2, r3
 80038b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038b2:	61bb      	str	r3, [r7, #24]
 80038b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b6:	6979      	ldr	r1, [r7, #20]
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	e841 2300 	strex	r3, r2, [r1]
 80038be:	613b      	str	r3, [r7, #16]
   return(result);
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1e6      	bne.n	8003894 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2220      	movs	r2, #32
 80038ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80038da:	bf00      	nop
 80038dc:	3754      	adds	r7, #84	@ 0x54
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr

080038e6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b084      	sub	sp, #16
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f7ff fb05 	bl	8002f14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800390a:	bf00      	nop
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003912:	b480      	push	{r7}
 8003914:	b08f      	sub	sp, #60	@ 0x3c
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800391e:	2b21      	cmp	r3, #33	@ 0x21
 8003920:	d14c      	bne.n	80039bc <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003928:	b29b      	uxth	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d132      	bne.n	8003994 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003934:	6a3b      	ldr	r3, [r7, #32]
 8003936:	e853 3f00 	ldrex	r3, [r3]
 800393a:	61fb      	str	r3, [r7, #28]
   return(result);
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003942:	637b      	str	r3, [r7, #52]	@ 0x34
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	461a      	mov	r2, r3
 800394a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800394c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800394e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003950:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003952:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003954:	e841 2300 	strex	r3, r2, [r1]
 8003958:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800395a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1e6      	bne.n	800392e <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	e853 3f00 	ldrex	r3, [r3]
 800396c:	60bb      	str	r3, [r7, #8]
   return(result);
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003974:	633b      	str	r3, [r7, #48]	@ 0x30
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	461a      	mov	r2, r3
 800397c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800397e:	61bb      	str	r3, [r7, #24]
 8003980:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003982:	6979      	ldr	r1, [r7, #20]
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	e841 2300 	strex	r3, r2, [r1]
 800398a:	613b      	str	r3, [r7, #16]
   return(result);
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1e6      	bne.n	8003960 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003992:	e013      	b.n	80039bc <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003998:	781a      	ldrb	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039a4:	1c5a      	adds	r2, r3, #1
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	3b01      	subs	r3, #1
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 80039bc:	bf00      	nop
 80039be:	373c      	adds	r7, #60	@ 0x3c
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b091      	sub	sp, #68	@ 0x44
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80039d4:	2b21      	cmp	r3, #33	@ 0x21
 80039d6:	d151      	bne.n	8003a7c <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80039de:	b29b      	uxth	r3, r3
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d132      	bne.n	8003a4a <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ec:	e853 3f00 	ldrex	r3, [r3]
 80039f0:	623b      	str	r3, [r7, #32]
   return(result);
 80039f2:	6a3b      	ldr	r3, [r7, #32]
 80039f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	461a      	mov	r2, r3
 8003a00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a02:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a04:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a0a:	e841 2300 	strex	r3, r2, [r1]
 8003a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1e6      	bne.n	80039e4 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	e853 3f00 	ldrex	r3, [r3]
 8003a22:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	461a      	mov	r2, r3
 8003a32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a34:	61fb      	str	r3, [r7, #28]
 8003a36:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a38:	69b9      	ldr	r1, [r7, #24]
 8003a3a:	69fa      	ldr	r2, [r7, #28]
 8003a3c:	e841 2300 	strex	r3, r2, [r1]
 8003a40:	617b      	str	r3, [r7, #20]
   return(result);
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1e6      	bne.n	8003a16 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003a48:	e018      	b.n	8003a7c <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003a50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a52:	881a      	ldrh	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a5c:	b292      	uxth	r2, r2
 8003a5e:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a64:	1c9a      	adds	r2, r3, #2
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	3b01      	subs	r3, #1
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 8003a7c:	bf00      	nop
 8003a7e:	3744      	adds	r7, #68	@ 0x44
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b088      	sub	sp, #32
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	e853 3f00 	ldrex	r3, [r3]
 8003a9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003aa4:	61fb      	str	r3, [r7, #28]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	461a      	mov	r2, r3
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	61bb      	str	r3, [r7, #24]
 8003ab0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab2:	6979      	ldr	r1, [r7, #20]
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	e841 2300 	strex	r3, r2, [r1]
 8003aba:	613b      	str	r3, [r7, #16]
   return(result);
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1e6      	bne.n	8003a90 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7fc ff50 	bl	8000974 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ad4:	bf00      	nop
 8003ad6:	3720      	adds	r7, #32
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003ae4:	bf00      	nop
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <memset>:
 8003af0:	4402      	add	r2, r0
 8003af2:	4603      	mov	r3, r0
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d100      	bne.n	8003afa <memset+0xa>
 8003af8:	4770      	bx	lr
 8003afa:	f803 1b01 	strb.w	r1, [r3], #1
 8003afe:	e7f9      	b.n	8003af4 <memset+0x4>

08003b00 <__libc_init_array>:
 8003b00:	b570      	push	{r4, r5, r6, lr}
 8003b02:	4d0d      	ldr	r5, [pc, #52]	@ (8003b38 <__libc_init_array+0x38>)
 8003b04:	4c0d      	ldr	r4, [pc, #52]	@ (8003b3c <__libc_init_array+0x3c>)
 8003b06:	1b64      	subs	r4, r4, r5
 8003b08:	10a4      	asrs	r4, r4, #2
 8003b0a:	2600      	movs	r6, #0
 8003b0c:	42a6      	cmp	r6, r4
 8003b0e:	d109      	bne.n	8003b24 <__libc_init_array+0x24>
 8003b10:	4d0b      	ldr	r5, [pc, #44]	@ (8003b40 <__libc_init_array+0x40>)
 8003b12:	4c0c      	ldr	r4, [pc, #48]	@ (8003b44 <__libc_init_array+0x44>)
 8003b14:	f000 f818 	bl	8003b48 <_init>
 8003b18:	1b64      	subs	r4, r4, r5
 8003b1a:	10a4      	asrs	r4, r4, #2
 8003b1c:	2600      	movs	r6, #0
 8003b1e:	42a6      	cmp	r6, r4
 8003b20:	d105      	bne.n	8003b2e <__libc_init_array+0x2e>
 8003b22:	bd70      	pop	{r4, r5, r6, pc}
 8003b24:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b28:	4798      	blx	r3
 8003b2a:	3601      	adds	r6, #1
 8003b2c:	e7ee      	b.n	8003b0c <__libc_init_array+0xc>
 8003b2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b32:	4798      	blx	r3
 8003b34:	3601      	adds	r6, #1
 8003b36:	e7f2      	b.n	8003b1e <__libc_init_array+0x1e>
 8003b38:	08003bb0 	.word	0x08003bb0
 8003b3c:	08003bb0 	.word	0x08003bb0
 8003b40:	08003bb0 	.word	0x08003bb0
 8003b44:	08003bb4 	.word	0x08003bb4

08003b48 <_init>:
 8003b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b4a:	bf00      	nop
 8003b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b4e:	bc08      	pop	{r3}
 8003b50:	469e      	mov	lr, r3
 8003b52:	4770      	bx	lr

08003b54 <_fini>:
 8003b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b56:	bf00      	nop
 8003b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b5a:	bc08      	pop	{r3}
 8003b5c:	469e      	mov	lr, r3
 8003b5e:	4770      	bx	lr
